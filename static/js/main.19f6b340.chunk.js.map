{"version":3,"sources":["constants/index.ts","models/CellModel.ts","models/BoardModel.ts","components/cell/cell.style.ts","components/cell/cell.component.tsx","components/board/baoard.component.tsx","components/minesweeper/topbar/topbar.style.ts","components/minesweeper/topbar/topbar.component.tsx","components/minesweeper/messagebox/message.style.ts","components/minesweeper/messagebox/message.component.tsx","components/minesweeper/levels/levels.style.ts","components/minesweeper/levels/levels.component.tsx","components/minesweeper/minesweeper.component.tsx","App.tsx","index.tsx"],"names":["GameStatus","CellModel","x","y","hasMine","isRevealed","hasFlag","proximity","this","NEIGHBOURS","LEVELS","EASY","difficulty","rows","columns","mines","MEDIUM","HARD","COLORS","CAMP_COLORS","BoardModel","nMines","field","minesCoordinates","buildBoard","min","max","Math","floor","random","row","col","c","checkLimits","counter","_getRandomCoordinate","cell","push","_defineMineProximity","_placeMines","reveal","styled","div","props","color","bg","mineColor","memo","onLeftClick","onRightClick","CAMP_COLORS_PAIR","getCampColorsPair","round","length","onClick","onContextMenu","e","preventDefault","icon","faFlag","id","faBomb","Board","showAndExpand","toggleFlag","map","style","display","StyledTopbar","section","GameTopbar","nFlags","reset","StyledMessageContainer","MessageBox","state","message","GAMEOVER","VICTORY","StyledLevelsBar","Levels","changeLevel","active","value","className","Minesweeper","useState","level","status","INPROGRESS","board","gameState","setGameState","cellLeft","setCellLeft","setNFlags","useEffect","prev","useCallback","showAllMines","r","resetGame","target","position","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19f6b340.chunk.js","sourcesContent":["export type Coords = [x: number, y: number];\r\n\r\nexport const NEIGHBOURS: Coords[] = [\r\n  [-1, -1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 0],\r\n  [1, 0],\r\n  [-1, 1],\r\n  [0, 1],\r\n  [1, 1],\r\n];\r\n\r\nexport enum GameStatus {\r\n  INPROGRESS,\r\n  GAMEOVER,\r\n  VICTORY,\r\n}\r\n\r\ntype Level = {\r\n  difficulty: string;\r\n  rows: number;\r\n  columns: number;\r\n  mines: number;\r\n};\r\n\r\nexport const LEVELS: { [key: string]: Level } = {\r\n  EASY: {\r\n    difficulty: \"EASY\",\r\n    rows: 10,\r\n    columns: 10,\r\n    mines: 15,\r\n  },\r\n  MEDIUM: {\r\n    difficulty: \"MEDIUM\",\r\n    rows: 15,\r\n    columns: 15,\r\n    mines: 35,\r\n  },\r\n  HARD: {\r\n    difficulty: \"HARD\",\r\n    rows: 15,\r\n    columns: 15,\r\n    mines: 50,\r\n  },\r\n};\r\n\r\nexport const COLORS = [\r\n  \"#2d2fa3\",\r\n  \"rgb(57, 128, 25)\",\r\n  \"rgb(211, 76, 22)\",\r\n  \"rgb(204, 19, 19)\",\r\n  \"rgb(156, 6, 56)\",\r\n];\r\n\r\nexport const CAMP_COLORS = {\r\n  LIGHTGREEN: \"rgb(170, 219, 124)\",\r\n  DARKGREEN: \"rgb(133, 201, 130)\",\r\n  LIGHTBROWN: \"rgb(180, 156, 125)\",\r\n  DARKBROWN: \"rgb(156, 138, 115)\",\r\n};\r\n\r\nexport const getCampColorsPair = (isRevealed: boolean): string[] => {\r\n  return isRevealed\r\n    ? [CAMP_COLORS.LIGHTBROWN, CAMP_COLORS.DARKBROWN]\r\n    : [CAMP_COLORS.LIGHTGREEN, CAMP_COLORS.DARKGREEN];\r\n};\r\n","export class CellModel {\r\n  constructor(\r\n    public x: number,\r\n    public y: number,\r\n    public hasMine: boolean = false,\r\n    public isRevealed: boolean = false,\r\n    public hasFlag: boolean = false,\r\n    public proximity: number = 0\r\n  ) {}\r\n\r\n  reveal() {\r\n    this.isRevealed = true;\r\n  }\r\n\r\n  toggleFlag() {\r\n    this.hasFlag = !this.hasFlag;\r\n  }\r\n}\r\n","import { CellModel } from \"./CellModel\";\r\nimport {Coords, NEIGHBOURS} from '../constants';\r\n\r\nexport class BoardModel {\r\n  constructor(\r\n    private rows: number,\r\n    private columns: number,\r\n    private nMines: number,\r\n    public field: CellModel[][] = [],\r\n    private minesCoordinates: Coords[] = []\r\n  ) {\r\n    this.buildBoard();\r\n  }\r\n\r\n  private _getRandomCoordinate(min: number, max: number) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  checkLimits(row: number, col: number): boolean {\r\n    return (\r\n      row >= 0 && row <= this.rows - 1 && col >= 0 && col <= this.columns - 1\r\n    );\r\n  }\r\n\r\n  private _defineMineProximity(): void {\r\n    for (let [x, y] of this.minesCoordinates) {\r\n      for (let [c, r] of NEIGHBOURS) {\r\n        const row = y + r;\r\n        const col = x + c;\r\n\r\n        if (this.checkLimits(row, col) && !this.field[row][col].hasMine) {\r\n          this.field[row][col].proximity++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _placeMines(): void {\r\n    let counter = 0;\r\n\r\n    while (counter < this.nMines) {\r\n      let [x, y]: Coords = [\r\n        this._getRandomCoordinate(0, this.columns - 1),\r\n        this._getRandomCoordinate(0, this.rows - 1),\r\n      ];\r\n\r\n      let cell = this.field[y][x];\r\n      if (!cell.hasMine) {\r\n        cell.hasMine = true;\r\n        counter++;\r\n        this.minesCoordinates.push([x, y]);\r\n      }\r\n    }\r\n    this._defineMineProximity();\r\n  }\r\n\r\n  buildBoard() {\r\n    this.field = [];\r\n    for (let y = 0; y < this.rows; y++) {\r\n      this.field.push([]);\r\n      for (let x = 0; x < this.columns; x++)\r\n        this.field[y].push(new CellModel(x, y));\r\n    }\r\n    this._placeMines();\r\n  }\r\n\r\n  showAllMines() {\r\n    for (let [x, y] of this.minesCoordinates) {\r\n      let cell = this.field[y][x];\r\n      cell.reveal();\r\n    }\r\n  }\r\n}\r\n","import styled from \"styled-components\";\r\n\r\ntype StyledCellProp = {\r\n  bg: string;\r\n  color: string;\r\n  mineColor: string;\r\n  isRevealed: boolean;\r\n};\r\n\r\nexport default styled.div<StyledCellProp>`\r\n  width: 35px;\r\n  height: 35px;\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-weight: 600;\r\n  color: ${(props) => props.color};\r\n  background-color: ${(props) => props.bg};\r\n  border: 0.02em solid white;\r\n  > svg#flag {\r\n    color: rgb(204, 19, 19);\r\n  }\r\n  > svg {\r\n    color: ${(props) => props.mineColor};\r\n    font-size: 1.2rem;\r\n  }\r\n  ::after {\r\n    content: \"\";\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n  }\r\n  :hover::after {\r\n    background-color: ${(props) =>\r\n      !props.isRevealed && \"rgba(255, 255, 255, 0.253)\"};\r\n  }\r\n`;\r\n","import React, { memo } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFlag, faBomb } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { COLORS, getCampColorsPair } from \"../../constants\";\r\nimport StyledCell from \"./cell.style\";\r\n\r\ntype CellProps = {\r\n  x: number;\r\n  y: number;\r\n  isRevealed: boolean;\r\n  hasFlag: boolean;\r\n  hasMine: boolean;\r\n  proximity: number;\r\n  onLeftClick: (row: number, column: number) => void;\r\n  onRightClick: (row: number, column: number) => void;\r\n};\r\n\r\nexport default memo(function Cell({\r\n  x,\r\n  y,\r\n  isRevealed,\r\n  hasFlag,\r\n  hasMine,\r\n  proximity,\r\n  onLeftClick,\r\n  onRightClick,\r\n}: CellProps) {\r\n  const bg = (() => {\r\n    const CAMP_COLORS_PAIR = getCampColorsPair(isRevealed);\r\n    let bg: string;\r\n    if (y % 2 === 0)\r\n      bg = x % 2 === 0 ? CAMP_COLORS_PAIR[0] : CAMP_COLORS_PAIR[1];\r\n    else bg = x % 2 === 0 ? CAMP_COLORS_PAIR[1] : CAMP_COLORS_PAIR[0];\r\n    return bg;\r\n  })();\r\n\r\n  const mineColor = COLORS[Math.round(Math.random() * COLORS.length)];\r\n\r\n  const handleLeftClick = () => {\r\n    onLeftClick(y, x);\r\n  };\r\n\r\n  const handleRightClick = (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ) => {\r\n    e.preventDefault();\r\n    onRightClick(y, x);\r\n  };\r\n\r\n  return (\r\n    <StyledCell\r\n      bg={bg}\r\n      color={COLORS[proximity]}\r\n      mineColor={mineColor}\r\n      isRevealed={isRevealed}\r\n      onClick={handleLeftClick}\r\n      onContextMenu={handleRightClick}\r\n    >\r\n      {hasFlag && !isRevealed && <FontAwesomeIcon icon={faFlag} id=\"flag\" />}\r\n      {hasMine && isRevealed && <FontAwesomeIcon icon={faBomb} />}\r\n      {isRevealed && proximity > 0 && <p>{proximity}</p>}\r\n    </StyledCell>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport Cell from \"../cell/cell.component\";\r\nimport { CellModel } from \"../../models/CellModel\";\r\n\r\ntype BoardProps = {\r\n  field: CellModel[][];\r\n  showAndExpand: (row: number, column: number) => void;\r\n  toggleFlag: (row: number, column: number) => void;\r\n};\r\n\r\nexport default function Board({\r\n  field,\r\n  showAndExpand,\r\n  toggleFlag,\r\n}: BoardProps) {\r\n  return (\r\n    <div>\r\n      {field.map((row, y) => (\r\n        <div key={`row-${y}`} style={{ display: \"flex\" }}>\r\n          {row.map((cell, x) => (\r\n            <Cell\r\n              key={`col-${x}`}\r\n              {...cell}\r\n              onLeftClick={showAndExpand}\r\n              onRightClick={toggleFlag}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledTopbar = styled.section`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  text-transform: uppercase;\r\n  font-weight: 600;\r\n  margin-bottom: 10px;\r\n  color: rgb(133, 201, 130);\r\n  svg#flag {\r\n    color: rgb(204, 19, 19);\r\n  }\r\n  > #restart:hover {\r\n    text-decoration: underline;\r\n    color: rgb(207, 203, 56);\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledTopbar } from \"./topbar.style\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFlag } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ntype GameTopbarProps = {\r\n  nFlags: number;\r\n  reset: () => void;\r\n};\r\n\r\nexport function GameTopbar({ nFlags, reset }: GameTopbarProps) {\r\n  return (\r\n    <StyledTopbar>\r\n      <span>\r\n        <FontAwesomeIcon icon={faFlag} id=\"flag\" /> {nFlags}\r\n      </span>\r\n      <span id=\"restart\" onClick={reset}>\r\n        RESTART\r\n      </span>\r\n    </StyledTopbar>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledMessageContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  position: absolute;\r\n  flex-direction: column;\r\n  z-index: 300;\r\n  background-color: rgba(255, 255, 255, 0.3);\r\n  width: 100%;\r\n  height: 100%;\r\n  bottom: 0;\r\n  h2 {\r\n    display: block;\r\n    font-size: 3rem;\r\n    color: #2d61f1;\r\n    margin-bottom: 10px;\r\n  }\r\n  button {\r\n    text-transform: uppercase;\r\n    padding: 10px 20px;\r\n    font-size: 1.1rem;\r\n    border: none;\r\n    background-color: #2d61f1;\r\n    color: white;\r\n    :hover {\r\n      background-color: #3b6df8;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { GameStatus } from \"../../../constants\";\r\nimport { StyledMessageContainer } from \"./message.style\";\r\n\r\ntype MessageBoxProps = {\r\n  state: GameStatus;\r\n  reset: () => void;\r\n};\r\n\r\nexport function MessageBox({ state, reset }: MessageBoxProps) {\r\n  const message = (() => {\r\n    if (state === GameStatus.GAMEOVER) return \"GAME OVER\";\r\n    if (state === GameStatus.VICTORY) return \"VICTORY\";\r\n  })();\r\n  return (\r\n    <StyledMessageContainer>\r\n      <h2>{message}</h2>\r\n      <button onClick={reset}>Play again</button>\r\n    </StyledMessageContainer>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledLevelsBar = styled.section`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 10px;\r\n  button {\r\n    padding: 5px 0;\r\n    color: #ccc;\r\n    font-weight: 700;\r\n    border: 1px solid #ccc;\r\n    flex-grow: 1;\r\n    outline: none;\r\n    background: none;\r\n    :hover {\r\n      color: rgb(207, 203, 56);\r\n    };\r\n    &.active {\r\n      background-color: rgb(61, 82, 58);\r\n      color: white;\r\n      border: none;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledLevelsBar } from \"./levels.style\";\r\n\r\ntype LevelsProps = {\r\n  changeLevel: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n  active: string;\r\n};\r\n\r\nexport function Levels({ changeLevel, active }: LevelsProps) {\r\n  return (\r\n    <StyledLevelsBar>\r\n      <button\r\n        onClick={changeLevel}\r\n        value=\"EASY\"\r\n        className={active === \"EASY\" ? \"active\" : \"\"}\r\n      >\r\n        EASY\r\n      </button>\r\n      <button\r\n        onClick={changeLevel}\r\n        value=\"MEDIUM\"\r\n        className={active === \"MEDIUM\" ? \"active\" : \"\"}\r\n      >\r\n        MEDIUM\r\n      </button>\r\n      <button\r\n        onClick={changeLevel}\r\n        value=\"HARD\"\r\n        className={active === \"HARD\" ? \"active\" : \"\"}\r\n      >\r\n        HARD\r\n      </button>\r\n    </StyledLevelsBar>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { BoardModel } from \"../../models/BoardModel\";\r\nimport { NEIGHBOURS, GameStatus, LEVELS } from \"../../constants\";\r\nimport Board from \"../board/baoard.component\";\r\nimport { GameTopbar } from \"./topbar/topbar.component\";\r\nimport { MessageBox } from \"./messagebox/message.component\";\r\nimport { Levels } from \"./levels/levels.component\";\r\n\r\nexport default function Minesweeper() {\r\n  const [gameState, setGameState] = useState({\r\n    level: LEVELS.EASY,\r\n    status: GameStatus.INPROGRESS,\r\n    board: new BoardModel(\r\n      LEVELS.EASY.rows,\r\n      LEVELS.EASY.columns,\r\n      LEVELS.EASY.mines\r\n    ),\r\n  });\r\n  const [cellLeft, setCellLeft] = useState(\r\n    LEVELS.EASY.rows * LEVELS.EASY.columns - LEVELS.EASY.mines\r\n  );\r\n  const [nFlags, setNFlags] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (gameState.status === GameStatus.INPROGRESS) {\r\n      setCellLeft(\r\n        gameState.level.rows * gameState.level.columns - gameState.level.mines\r\n      );\r\n      setNFlags(0);\r\n    }\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    if (cellLeft === 0)\r\n      setGameState((prev) => ({ ...prev, status: GameStatus.VICTORY }));\r\n  }, [cellLeft]);\r\n\r\n  const showAndExpand = useCallback(\r\n    (row: number, col: number): void => {\r\n      const cell = gameState.board.field[row][col];\r\n      if (cell.isRevealed || cell.hasFlag) return;\r\n      if (cell.hasMine) {\r\n        gameState.board.showAllMines();\r\n        setGameState((prev) => ({ ...prev, status: GameStatus.GAMEOVER }));\r\n        return;\r\n      }\r\n\r\n      cell.reveal();\r\n      setCellLeft((prev) => prev - 1);\r\n      if (cell.proximity > 0) return;\r\n\r\n      for (let [c, r] of NEIGHBOURS) {\r\n        c += col;\r\n        r += row;\r\n        if (gameState.board.checkLimits(r, c)) showAndExpand(r, c);\r\n      }\r\n    },\r\n    [gameState.board]\r\n  );\r\n\r\n  const toggleFlag = useCallback(\r\n    (row: number, col: number) => {\r\n      if (gameState.status === GameStatus.INPROGRESS) {\r\n        let cell = gameState.board.field[row][col];\r\n        if (cell.hasFlag) {\r\n          setNFlags((prev) => prev - 1);\r\n          cell.toggleFlag();\r\n        } else if (nFlags < gameState.level.mines) {\r\n          setNFlags((prev) => prev + 1);\r\n          cell.toggleFlag();\r\n        }\r\n      }\r\n    },\r\n    [gameState.board.field, gameState.level.mines, gameState.status, nFlags]\r\n  );\r\n\r\n  const resetGame = (): void => {\r\n    setGameState((prev) => ({\r\n      ...prev,\r\n      status: GameStatus.INPROGRESS,\r\n      board: new BoardModel(\r\n        prev.level.rows,\r\n        prev.level.columns,\r\n        prev.level.mines\r\n      ),\r\n    }));\r\n  };\r\n\r\n  const changeLevel = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ): void => {\r\n    const value = (e.target as HTMLButtonElement).value;\r\n    const level = LEVELS[value];\r\n    setGameState({\r\n      level,\r\n      status: GameStatus.INPROGRESS,\r\n      board: new BoardModel(level.rows, level.columns, level.mines),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <h1>Minesweeper</h1>\r\n      <Levels changeLevel={changeLevel} active={gameState.level.difficulty} />\r\n      <GameTopbar nFlags={gameState.level.mines - nFlags} reset={resetGame} />\r\n      <section style={{ position: \"relative\" }}>\r\n        {gameState.status !== GameStatus.INPROGRESS && (\r\n          <MessageBox reset={resetGame} state={gameState.status} />\r\n        )}\r\n        <Board\r\n          {...gameState.board}\r\n          showAndExpand={showAndExpand}\r\n          toggleFlag={toggleFlag}\r\n        />\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Minesweeper from \"./components/minesweeper/minesweeper.component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minesweeper />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}