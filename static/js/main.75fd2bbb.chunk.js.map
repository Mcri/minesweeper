{"version":3,"sources":["types/index.ts","constants/index.ts","helpers/boardSetup.ts","helpers/boardInteractions.ts","helpers/cellColors.ts","components/cell/cell.style.ts","state/actions.ts","components/cell/cell.component.tsx","providers/minesweeper.provider.tsx","state/reducer.ts","components/board/baoard.component.tsx","components/minesweeper/topbar/topbar.style.ts","components/minesweeper/topbar/topbar.component.tsx","components/minesweeper/messagebox/message.style.ts","components/minesweeper/messagebox/message.component.tsx","components/minesweeper/levels/levels.style.ts","components/minesweeper/levels/levels.component.tsx","components/minesweeper/minesweeper.component.tsx","App.tsx","index.tsx"],"names":["GameStatus","NEIGHBOURS","LEVELS","EASY","difficulty","rows","columns","mines","MEDIUM","HARD","INITIAL_GAME_STATE","level","status","INPROGRESS","board","nFlags","cellsLeft","COLORS","CAMP_COLORS","minesCoordinates","getRandomCoordinate","min","max","Math","floor","random","checkLimits","coords","col","row","placeMines","nMines","counter","x","y","cell","hasMine","push","c","proximity","defineMineProximity","buildBoard","hasFlag","isRevealed","showAllMines","updatedBoard","toggleFlag","showAndExpand","length","cols","revealCell","r","styled","ActionType","div","props","color","bg","mineColor","memo","onLeftClick","onRightClick","CAMP_COLORS_PAIR","getCampColorsPair","round","onClick","onContextMenu","e","preventDefault","icon","faFlag","id","faBomb","MinesweeperContext","createContext","MinesweeperProvider","children","reducer","initialState","useReducer","state","dispatch","Provider","value","action","type","BUILD_BOARD","REVEAL_CELLS","SET_FLAG","payload","SET_GAME_OVER","GAMEOVER","SET_VICTORY","VICTORY","RESET_GAME","CHANGE_LEVEL","Board","useContext","useCallback","placeFlag","map","style","display","StyledTopbar","section","GameTopbar","reset","StyledMessageContainer","MessageBox","message","StyledLevelsBar","Levels","changeLevel","active","className","Minesweeper","useEffect","resetGame","target","position","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75fd2bbb.chunk.js","sourcesContent":["export type Coords = [x: number, y: number];\r\n\r\nexport enum GameStatus {\r\n  INPROGRESS,\r\n  GAMEOVER,\r\n  VICTORY,\r\n}\r\n\r\nexport type Level = {\r\n  difficulty: string;\r\n  rows: number;\r\n  columns: number;\r\n  mines: number;\r\n};\r\n\r\nexport type Cell = {\r\n  x: number;\r\n  y: number;\r\n  hasMine: boolean;\r\n  isRevealed: boolean;\r\n  hasFlag: boolean;\r\n  proximity: number;\r\n};\r\n\r\nexport type GameState = {\r\n  level: Level;\r\n  status: GameStatus;\r\n  board: Cell[][];\r\n  nFlags: number;\r\n  cellsLeft: number;\r\n};\r\n","import { Coords, GameState, GameStatus, Level } from \"../types\";\r\n\r\nexport const NEIGHBOURS: Coords[] = [\r\n  [-1, -1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 0],\r\n  [1, 0],\r\n  [-1, 1],\r\n  [0, 1],\r\n  [1, 1],\r\n];\r\n\r\nexport const LEVELS: { [key: string]: Level } = {\r\n  EASY: {\r\n    difficulty: \"EASY\",\r\n    rows: 10,\r\n    columns: 10,\r\n    mines: 15,\r\n  },\r\n  MEDIUM: {\r\n    difficulty: \"MEDIUM\",\r\n    rows: 15,\r\n    columns: 15,\r\n    mines: 35,\r\n  },\r\n  HARD: {\r\n    difficulty: \"HARD\",\r\n    rows: 15,\r\n    columns: 15,\r\n    mines: 50,\r\n  },\r\n};\r\n\r\nexport const INITIAL_GAME_STATE: GameState = {\r\n  level: LEVELS.EASY,\r\n  status: GameStatus.INPROGRESS,\r\n  board: [],\r\n  nFlags: LEVELS.EASY.mines,\r\n  cellsLeft: LEVELS.EASY.rows * LEVELS.EASY.columns - LEVELS.EASY.mines,\r\n};\r\n\r\nexport const COLORS = [\r\n  \"#2d2fa3\",\r\n  \"rgb(57, 128, 25)\",\r\n  \"rgb(211, 76, 22)\",\r\n  \"rgb(204, 19, 19)\",\r\n  \"rgb(156, 6, 56)\",\r\n];\r\n\r\nexport const CAMP_COLORS = {\r\n  LIGHTGREEN: \"rgb(170, 219, 124)\",\r\n  DARKGREEN: \"rgb(133, 201, 130)\",\r\n  LIGHTBROWN: \"rgb(180, 156, 125)\",\r\n  DARKBROWN: \"rgb(156, 138, 115)\",\r\n};\r\n","import { NEIGHBOURS } from \"../constants\";\r\nimport { Cell, Coords } from \"../types\";\r\n\r\nexport let minesCoordinates: Coords[] = [];\r\n\r\nfunction getRandomCoordinate(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function checkLimits(\r\n  coords: Coords,\r\n  rows: number,\r\n  columns: number\r\n): boolean {\r\n  const [col, row] = coords;\r\n  return row >= 0 && row <= rows - 1 && col >= 0 && col <= columns - 1;\r\n}\r\n\r\nfunction defineMineProximity(\r\n  board: Cell[][],\r\n  rows: number,\r\n  columns: number\r\n): void {\r\n  for (let [x, y] of minesCoordinates) {\r\n    for (let [c, r] of NEIGHBOURS) {\r\n      const row = y + r;\r\n      const col = x + c;\r\n\r\n      if (checkLimits([col, row], rows, columns) && !board[row][col].hasMine) {\r\n        board[row][col].proximity++;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction placeMines(\r\n  nMines: number,\r\n  rows: number,\r\n  columns: number,\r\n  board: Cell[][]\r\n): void {\r\n  let counter = 0;\r\n\r\n  while (counter < nMines) {\r\n    let [x, y]: Coords = [\r\n      getRandomCoordinate(0, columns - 1),\r\n      getRandomCoordinate(0, rows - 1),\r\n    ];\r\n\r\n    let cell = board[y][x];\r\n    if (!cell.hasMine) {\r\n      cell.hasMine = true;\r\n      counter++;\r\n      minesCoordinates.push([x, y]);\r\n    }\r\n  }\r\n  defineMineProximity(board, rows, columns);\r\n}\r\n\r\nexport function buildBoard(\r\n  nMines: number,\r\n  rows: number,\r\n  columns: number\r\n): Cell[][] {\r\n  minesCoordinates = [];\r\n  const board: Cell[][] = [];\r\n  for (let y = 0; y < rows; y++) {\r\n    board.push([]);\r\n    for (let x = 0; x < columns; x++)\r\n      board[y].push({\r\n        x,\r\n        y,\r\n        hasMine: false,\r\n        hasFlag: false,\r\n        isRevealed: false,\r\n        proximity: 0,\r\n      });\r\n  }\r\n  placeMines(nMines, rows, columns, board);\r\n  return board;\r\n}\r\n","import { NEIGHBOURS } from \"../constants\";\r\nimport { Cell, Coords } from \"../types\";\r\nimport { checkLimits, minesCoordinates } from \"./boardSetup\";\r\n\r\nexport function showAllMines(board: Cell[][]): { board: Cell[][] } {\r\n  const updatedBoard = [...board];\r\n  for (let [x, y] of minesCoordinates) {\r\n    updatedBoard[y][x].isRevealed = true;\r\n  }\r\n  return { board: updatedBoard };\r\n}\r\n\r\nexport function toggleFlag([x, y]: Coords, board: Cell[][], nFlags: number) {\r\n  const updatedBoard = [...board];\r\n  const cell = updatedBoard[y][x];\r\n  if (cell.hasFlag) {\r\n    nFlags++;\r\n    cell.hasFlag = false;\r\n  } else if (nFlags > 0) {\r\n    nFlags--;\r\n    cell.hasFlag = true;\r\n  }\r\n  return { board: updatedBoard, nFlags };\r\n}\r\n\r\nexport function showAndExpand(\r\n  [x, y]: Coords,\r\n  board: Cell[][],\r\n  cellsLeft: number\r\n): { board: Cell[][]; cellsLeft: number } {\r\n  const rows = board.length;\r\n  const cols = board[0].length;\r\n  const updatedBoard = [...board];\r\n\r\n  const revealCell = (x: number, y: number) => {\r\n    const cell = updatedBoard[y][x];\r\n    if (cell.isRevealed || cell.hasFlag) return;\r\n    cell.isRevealed = true;\r\n    cellsLeft--;\r\n    if (cell.proximity > 0) return;\r\n\r\n    for (let [c, r] of NEIGHBOURS) {\r\n      c += x;\r\n      r += y;\r\n      if (checkLimits([c, r], rows, cols)) revealCell(c, r);\r\n    }\r\n  };\r\n  revealCell(x, y);\r\n\r\n  return { board: updatedBoard, cellsLeft };\r\n}\r\n","import { CAMP_COLORS } from \"../constants\";\r\n\r\nexport const getCampColorsPair = (isRevealed: boolean): string[] => {\r\n  return isRevealed\r\n    ? [CAMP_COLORS.LIGHTBROWN, CAMP_COLORS.DARKBROWN]\r\n    : [CAMP_COLORS.LIGHTGREEN, CAMP_COLORS.DARKGREEN];\r\n};","import styled from \"styled-components\";\r\n\r\ntype StyledCellProp = {\r\n  bg: string;\r\n  color: string;\r\n  mineColor: string;\r\n  isRevealed: boolean;\r\n};\r\n\r\nexport default styled.div<StyledCellProp>`\r\n  width: 35px;\r\n  height: 35px;\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-weight: 600;\r\n  color: ${(props) => props.color};\r\n  background-color: ${(props) => props.bg};\r\n  \r\n  > svg#flag {\r\n    color: rgb(204, 19, 19);\r\n  }\r\n  > svg {\r\n    color: ${(props) => props.mineColor};\r\n    font-size: 1.2rem;\r\n  }\r\n  ::after {\r\n    content: \"\";\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n  }\r\n  :hover::after {\r\n    background-color: ${(props) =>\r\n      !props.isRevealed && \"rgba(255, 255, 255, 0.253)\"};\r\n  }\r\n`;\r\n","import { Cell, Level } from \"../types\";\r\n\r\nexport enum ActionType {\r\n  BUILD_BOARD,\r\n  RESET_GAME,\r\n  SET_GAME_OVER,\r\n  SET_VICTORY,\r\n  SET_FLAG,\r\n  REVEAL_CELLS,\r\n  CHANGE_LEVEL,\r\n}\r\n\r\ninterface RevealCellsAction {\r\n  type: ActionType.REVEAL_CELLS;\r\n  payload: {\r\n    board: Cell[][];\r\n    cellsLeft: number;\r\n  };\r\n}\r\n\r\ninterface SetFlagAction {\r\n  type: ActionType.SET_FLAG;\r\n  payload: {\r\n    board: Cell[][];\r\n    nFlags: number;\r\n  };\r\n}\r\n\r\ninterface SetGameOverAction {\r\n  type: ActionType.SET_GAME_OVER;\r\n  payload: {\r\n    board: Cell[][];\r\n  };\r\n}\r\n\r\ninterface SetVictoryAction {\r\n  type: ActionType.SET_VICTORY;\r\n}\r\n\r\ninterface ResetGameAction {\r\n  type: ActionType.RESET_GAME;\r\n}\r\n\r\ninterface ChangeLevelAction {\r\n  type: ActionType.CHANGE_LEVEL;\r\n  payload: {\r\n    level: Level;\r\n  };\r\n}\r\n\r\ninterface BuildBoardAction {\r\n  type: ActionType.BUILD_BOARD;\r\n}\r\n\r\nexport type GameAction =\r\n  | RevealCellsAction\r\n  | SetFlagAction\r\n  | SetVictoryAction\r\n  | SetGameOverAction\r\n  | ResetGameAction\r\n  | ChangeLevelAction\r\n  | BuildBoardAction;\r\n","import React, { memo } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFlag, faBomb } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { COLORS } from \"../../constants\";\r\nimport { getCampColorsPair } from \"../../helpers\";\r\nimport StyledCell from \"./cell.style\";\r\n\r\ntype CellProps = {\r\n  x: number;\r\n  y: number;\r\n  isRevealed: boolean;\r\n  hasFlag: boolean;\r\n  hasMine: boolean;\r\n  proximity: number;\r\n  onLeftClick: (row: number, column: number) => void;\r\n  onRightClick: (row: number, column: number) => void;\r\n};\r\n\r\nexport default memo(function Cell({\r\n  x,\r\n  y,\r\n  isRevealed,\r\n  hasFlag,\r\n  hasMine,\r\n  proximity,\r\n  onLeftClick,\r\n  onRightClick,\r\n}: CellProps) {\r\n  const bg = (() => {\r\n    const CAMP_COLORS_PAIR = getCampColorsPair(isRevealed);\r\n    let bg: string;\r\n    if (y % 2 === 0)\r\n      bg = x % 2 === 0 ? CAMP_COLORS_PAIR[0] : CAMP_COLORS_PAIR[1];\r\n    else bg = x % 2 === 0 ? CAMP_COLORS_PAIR[1] : CAMP_COLORS_PAIR[0];\r\n    return bg;\r\n  })();\r\n\r\n  const mineColor = COLORS[Math.round(Math.random() * COLORS.length)];\r\n\r\n  const handleLeftClick = () => {\r\n    onLeftClick(y, x);\r\n  };\r\n\r\n  const handleRightClick = (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ) => {\r\n    e.preventDefault();\r\n    onRightClick(y, x);\r\n  };\r\n\r\n  return (\r\n    <StyledCell\r\n      bg={bg}\r\n      color={COLORS[proximity]}\r\n      mineColor={mineColor}\r\n      isRevealed={isRevealed}\r\n      onClick={handleLeftClick}\r\n      onContextMenu={handleRightClick}\r\n    >\r\n      {hasFlag && !isRevealed && <FontAwesomeIcon icon={faFlag} id=\"flag\" />}\r\n      {hasMine && isRevealed && <FontAwesomeIcon icon={faBomb} />}\r\n      {isRevealed && proximity > 0 && <p>{proximity}</p>}\r\n    </StyledCell>\r\n  );\r\n});\r\n","import React, { createContext, ReactNode, useReducer } from \"react\";\r\nimport { INITIAL_GAME_STATE } from \"../constants\";\r\nimport { GameAction } from \"../state/actions\";\r\nimport { GameState } from \"../types\";\r\n\r\nexport const MinesweeperContext = createContext<\r\n  [GameState, React.Dispatch<GameAction>]\r\n>([INITIAL_GAME_STATE, () => null]);\r\n\r\nexport type Props = {\r\n  children: ReactNode;\r\n  initialState: GameState;\r\n  reducer: (state: GameState, action: GameAction) => GameState;\r\n};\r\n\r\nexport const MinesweeperProvider = ({\r\n  children,\r\n  reducer,\r\n  initialState,\r\n}: Props) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <MinesweeperContext.Provider value={[state, dispatch]}>\r\n      {children}\r\n    </MinesweeperContext.Provider>\r\n  );\r\n};\r\n","import { GameState, GameStatus } from \"../types\";\r\nimport { GameAction, ActionType } from \"./actions\";\r\nimport { buildBoard } from \"../helpers\";\r\n\r\nexport const reducer = (state: GameState, action: GameAction): GameState => {\r\n  switch (action.type) {\r\n    case ActionType.BUILD_BOARD:\r\n      return {\r\n        ...state,\r\n        board: buildBoard(\r\n          state.level.mines,\r\n          state.level.rows,\r\n          state.level.columns\r\n        ),\r\n      };\r\n    case ActionType.REVEAL_CELLS:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    case ActionType.SET_FLAG:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    case ActionType.SET_GAME_OVER:\r\n      return {\r\n        ...state,\r\n        status: GameStatus.GAMEOVER,\r\n        ...action.payload,\r\n      };\r\n    case ActionType.SET_VICTORY:\r\n      return {\r\n        ...state,\r\n        status: GameStatus.VICTORY,\r\n      };\r\n    case ActionType.RESET_GAME:\r\n      return {\r\n        ...state,\r\n        status: GameStatus.INPROGRESS,\r\n        board: buildBoard(\r\n          state.level.mines,\r\n          state.level.rows,\r\n          state.level.columns\r\n        ),\r\n        cellsLeft: state.level.columns * state.level.rows - state.level.mines,\r\n        nFlags: state.level.mines,\r\n      };\r\n    case ActionType.CHANGE_LEVEL:\r\n      const { level } = action.payload;\r\n      return {\r\n        ...state,\r\n        status: GameStatus.INPROGRESS,\r\n        level: level,\r\n        board: buildBoard(level.mines, level.rows, level.columns),\r\n        cellsLeft: level.columns * level.rows - level.mines,\r\n        nFlags: level.mines,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useCallback, useContext } from \"react\";\r\nimport CellView from \"../cell/cell.component\";\r\nimport { MinesweeperContext } from \"../../providers\";\r\nimport { GameStatus } from \"../../types\";\r\nimport { showAllMines, showAndExpand, toggleFlag } from \"../../helpers\";\r\nimport { ActionType } from \"../../state\";\r\n\r\nexport default function Board() {\r\n  const [{ board, status, cellsLeft, level, nFlags }, dispatch] = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  const revealCell = useCallback(\r\n    (row: number, col: number): void => {\r\n      if (status === GameStatus.INPROGRESS) {\r\n        const cell = board[row][col];\r\n        if (cell.hasMine) {\r\n          dispatch({\r\n            type: ActionType.SET_GAME_OVER,\r\n            payload: showAllMines(board),\r\n          });\r\n          return;\r\n        }\r\n        dispatch({\r\n          type: ActionType.REVEAL_CELLS,\r\n          payload: showAndExpand([col, row], board, cellsLeft),\r\n        });\r\n      }\r\n    },\r\n    [board, cellsLeft, dispatch, status]\r\n  );\r\n\r\n  const placeFlag = useCallback(\r\n    (row: number, col: number) => {\r\n      if (status === GameStatus.INPROGRESS && nFlags <= level.mines) {\r\n        dispatch({\r\n          type: ActionType.SET_FLAG,\r\n          payload: toggleFlag([col, row], board, nFlags),\r\n        });\r\n      }\r\n    },\r\n    [board, dispatch, level.mines, nFlags, status]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {board.map((row, y) => (\r\n        <div key={`row-${y}`} style={{ display: \"flex\" }}>\r\n          {row.map((cell, x) => (\r\n            <CellView\r\n              key={`col-${x}`}\r\n              {...cell}\r\n              onLeftClick={revealCell}\r\n              onRightClick={placeFlag}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledTopbar = styled.section`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  text-transform: uppercase;\r\n  font-weight: 600;\r\n  margin-bottom: 10px;\r\n  color: rgb(133, 201, 130);\r\n  svg#flag {\r\n    color: rgb(204, 19, 19);\r\n  }\r\n  > #restart:hover {\r\n    text-decoration: underline;\r\n    color: rgb(207, 203, 56);\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledTopbar } from \"./topbar.style\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFlag } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ntype GameTopbarProps = {\r\n  nFlags: number;\r\n  reset: () => void;\r\n};\r\n\r\nexport function GameTopbar({ nFlags, reset }: GameTopbarProps) {\r\n  return (\r\n    <StyledTopbar>\r\n      <span>\r\n        <FontAwesomeIcon icon={faFlag} id=\"flag\" /> {nFlags}\r\n      </span>\r\n      <span id=\"restart\" onClick={reset}>\r\n        RESTART\r\n      </span>\r\n    </StyledTopbar>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledMessageContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  position: absolute;\r\n  flex-direction: column;\r\n  z-index: 300;\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  width: 100%;\r\n  height: 100%;\r\n  bottom: 0;\r\n  h2 {\r\n    display: block;\r\n    font-size: 3rem;\r\n    color: rgb(56, 82, 62);\r\n    margin-bottom: 10px;\r\n  }\r\n  button {\r\n    text-transform: uppercase;\r\n    padding: 10px 20px;\r\n    font-size: 1.1rem;\r\n    border: none;\r\n    background-color: rgb(207, 203, 56);\r\n    color: white;\r\n    :hover {\r\n      background-color: rgb(201, 197, 24);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { GameStatus } from \"../../../types\";\r\nimport { StyledMessageContainer } from \"./message.style\";\r\n\r\ntype MessageBoxProps = {\r\n  state: GameStatus;\r\n  reset: () => void;\r\n};\r\n\r\nexport function MessageBox({ state, reset }: MessageBoxProps) {\r\n  const message = (() => {\r\n    if (state === GameStatus.GAMEOVER) return \"GAME OVER\";\r\n    if (state === GameStatus.VICTORY) return \"VICTORY\";\r\n  })();\r\n  return (\r\n    <StyledMessageContainer>\r\n      <h2>{message}</h2>\r\n      <button onClick={reset}>Play again</button>\r\n    </StyledMessageContainer>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledLevelsBar = styled.section`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 10px;\r\n  button {\r\n    padding: 5px 0;\r\n    color: #ccc;\r\n    font-weight: 700;\r\n    border: 1px solid #ccc;\r\n    flex-grow: 1;\r\n    outline: none;\r\n    background: none;\r\n    :hover {\r\n      color: rgb(207, 203, 56);\r\n    };\r\n    &.active {\r\n      background-color: rgb(56, 82, 62);\r\n      color: white;\r\n      border: none;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledLevelsBar } from \"./levels.style\";\r\n\r\ntype LevelsProps = {\r\n  changeLevel: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n  active: string;\r\n};\r\n\r\nexport function Levels({ changeLevel, active }: LevelsProps) {\r\n  return (\r\n    <StyledLevelsBar>\r\n      <button\r\n        onClick={changeLevel}\r\n        value=\"EASY\"\r\n        className={active === \"EASY\" ? \"active\" : \"\"}\r\n      >\r\n        EASY\r\n      </button>\r\n      <button\r\n        onClick={changeLevel}\r\n        value=\"MEDIUM\"\r\n        className={active === \"MEDIUM\" ? \"active\" : \"\"}\r\n      >\r\n        MEDIUM\r\n      </button>\r\n      <button\r\n        onClick={changeLevel}\r\n        value=\"HARD\"\r\n        className={active === \"HARD\" ? \"active\" : \"\"}\r\n      >\r\n        HARD\r\n      </button>\r\n    </StyledLevelsBar>\r\n  );\r\n}\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport Board from \"../board/baoard.component\";\r\nimport { GameTopbar } from \"./topbar/topbar.component\";\r\nimport { MessageBox } from \"./messagebox/message.component\";\r\nimport { Levels } from \"./levels/levels.component\";\r\nimport { GameStatus } from \"../../types\";\r\nimport { MinesweeperContext } from \"../../providers\";\r\nimport { ActionType } from \"../../state\";\r\n\r\nimport { LEVELS } from \"../../constants\";\r\n\r\nexport default function Minesweeper() {\r\n  const [{ status, cellsLeft, nFlags, level }, dispatch] = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: ActionType.BUILD_BOARD });\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (cellsLeft === 0) dispatch({ type: ActionType.SET_VICTORY });\r\n  }, [dispatch, cellsLeft]);\r\n\r\n  const resetGame = (): void => {\r\n    dispatch({ type: ActionType.RESET_GAME });\r\n  };\r\n\r\n  const changeLevel = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ): void => {\r\n    const value = (e.target as HTMLButtonElement).value;\r\n    dispatch({\r\n      type: ActionType.CHANGE_LEVEL,\r\n      payload: { level: LEVELS[value] },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <h1>Minesweeper</h1>\r\n      <Levels changeLevel={changeLevel} active={level.difficulty} />\r\n      <GameTopbar nFlags={nFlags} reset={resetGame} />\r\n      <section style={{ position: \"relative\" }}>\r\n        {status !== GameStatus.INPROGRESS && (\r\n          <MessageBox reset={resetGame} state={status} />\r\n        )}\r\n        <Board />\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Minesweeper from \"./components/minesweeper/minesweeper.component\";\r\nimport { MinesweeperProvider } from \"./providers\";\r\nimport { reducer } from \"./state\";\r\nimport { INITIAL_GAME_STATE } from \"./constants\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MinesweeperProvider initialState={INITIAL_GAME_STATE} reducer={reducer}>\r\n        <Minesweeper />\r\n      </MinesweeperProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}