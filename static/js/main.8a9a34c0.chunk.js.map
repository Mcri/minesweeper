{"version":3,"sources":["types/index.ts","constants/index.ts","helpers/boardSetup.ts","helpers/boardInteractions.ts","helpers/cellColors.ts","components/cell/cell.style.ts","components/cell/cell.component.tsx","providers/minesweeper.provider.tsx","state/actions.ts","state/reducer.ts","components/board/baoard.component.tsx","components/minesweeper/topbar/topbar.style.ts","components/minesweeper/topbar/timer.component.tsx","hooks/useTimer.ts","components/minesweeper/topbar/topbar.component.tsx","components/minesweeper/messagebox/message.style.ts","components/minesweeper/messagebox/message.component.tsx","components/minesweeper/levels/levels.style.ts","components/minesweeper/levels/levels.component.tsx","components/minesweeper/minesweeper.component.tsx","components/App.tsx","index.tsx"],"names":["GameStatus","NEIGHBOURS","LEVELS","EASY","difficulty","rows","columns","mines","MEDIUM","HARD","INITIAL_GAME_STATE","level","status","TO_START","board","nFlags","cellsLeft","BASE_CELL","x","y","hasMine","hasFlag","isRevealed","proximity","COLORS","CAMP_COLORS","minesCoordinates","getRandomCoordinate","min","max","Math","floor","random","checkLimits","col","row","setProximity","toAdd","length","c","cell","buildBoard","nMines","content","push","buildMatrix","counter","placeMines","defineMineProximity","rebuildBoard","map","reduce","acc","concat","defineCellColor","CAMP_COLORS_PAIR","getCampColorsPair","styled","div","props","color","bg","mineColor","Cell","onLeftClick","onRightClick","round","onClick","onContextMenu","e","preventDefault","icon","faFlag","id","className","ActionType","MinesweeperContext","createContext","MinesweeperProvider","children","reducer","initialState","useReducer","state","dispatch","Provider","value","action","type","BUILD_BOARD","START_GAME","IN_PROGRESS","SET_VICTORY","VICTORY","SET_GAME_OVER","GAME_OVER","REVEAL_CELLS","cols","updatedBoard","revealCell","r","showAndExpand","coords","PLACE_FLAG","cy","cx","toggleFlag","REPLACE_MINE","console","log","getCoordsFirstFreeCell","fx","fy","replaceMine","RESET_GAME","CHANGE_LEVEL","Board","useContext","placeFlag","style","display","StyledTopbar","section","Timer","useState","time","setTime","isActive","setIsActive","timer","useRef","useEffect","current","setInterval","prev","clearInterval","start","useCallback","stop","reset","useTimer","faStopwatch","Date","toISOString","substr","GameTopbar","StyledMessageContainer","MessageBox","message","StyledLevelsBar","Levels","changeLevel","active","Minesweeper","resetGame","target","position","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a9a34c0.chunk.js","sourcesContent":["export type Coords = [x: number, y: number];\r\n\r\nexport enum GameStatus {\r\n  TO_START,\r\n  IN_PROGRESS,\r\n  GAME_OVER,\r\n  VICTORY,\r\n}\r\n\r\nexport type Level = Readonly<{\r\n  difficulty: string;\r\n  rows: number;\r\n  columns: number;\r\n  mines: number;\r\n}>;\r\n\r\nexport type Cell = {\r\n  x: number;\r\n  y: number;\r\n  hasMine: boolean;\r\n  isRevealed: boolean;\r\n  hasFlag: boolean;\r\n  proximity: number;\r\n};\r\n\r\nexport type GameState = Readonly<{\r\n  level: Level;\r\n  status: GameStatus;\r\n  board: Cell[][];\r\n  nFlags: number;\r\n  cellsLeft: number;\r\n}>;\r\n","import { Cell, Coords, GameState, GameStatus, Level } from \"../types\";\r\n\r\nexport const NEIGHBOURS: Coords[] = [\r\n  [-1, -1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 0],\r\n  [1, 0],\r\n  [-1, 1],\r\n  [0, 1],\r\n  [1, 1],\r\n];\r\n\r\nexport const LEVELS: { [key: string]: Level } = {\r\n  EASY: {\r\n    difficulty: \"EASY\",\r\n    rows: 10,\r\n    columns: 10,\r\n    mines: 15,\r\n  },\r\n  MEDIUM: {\r\n    difficulty: \"MEDIUM\",\r\n    rows: 15,\r\n    columns: 15,\r\n    mines: 35,\r\n  },\r\n  HARD: {\r\n    difficulty: \"HARD\",\r\n    rows: 15,\r\n    columns: 15,\r\n    mines: 50,\r\n  },\r\n};\r\n\r\nexport const INITIAL_GAME_STATE: GameState = {\r\n  level: LEVELS.EASY,\r\n  status: GameStatus.TO_START,\r\n  board: [],\r\n  nFlags: LEVELS.EASY.mines,\r\n  cellsLeft: LEVELS.EASY.rows * LEVELS.EASY.columns - LEVELS.EASY.mines,\r\n};\r\n\r\nexport const BASE_CELL: Cell = {\r\n  x: 0,\r\n  y: 0,\r\n  hasMine: false,\r\n  hasFlag: false,\r\n  isRevealed: false,\r\n  proximity: 0,\r\n};\r\n\r\nexport const COLORS = [\r\n  \"rgb(45, 47, 163)\",\r\n  \"rgb(57, 128, 25)\",\r\n  \"rgb(211, 76, 22)\",\r\n  \"rgb(204, 19, 19)\",\r\n  \"rgb(156, 6, 56)\",\r\n];\r\n\r\nexport const CAMP_COLORS = {\r\n  LIGHTGREEN: \"rgb(170, 219, 124)\",\r\n  DARKGREEN: \"rgb(133, 201, 130)\",\r\n  LIGHTBROWN: \"rgb(180, 156, 125)\",\r\n  DARKBROWN: \"rgb(156, 138, 115)\",\r\n};\r\n","import { BASE_CELL, NEIGHBOURS } from \"../constants\";\r\nimport { Cell, Coords } from \"../types\";\r\n\r\nlet minesCoordinates: Coords[] = [];\r\n\r\nfunction getRandomCoordinate(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function checkLimits(\r\n  [col, row]: Coords,\r\n  rows: number,\r\n  columns: number\r\n): boolean {\r\n  return row >= 0 && row <= rows - 1 && col >= 0 && col <= columns - 1;\r\n}\r\n\r\nexport function setProximity([x, y]: Coords, board: Cell[][], toAdd: number) {\r\n  const rows = board.length;\r\n  const columns = board[0].length;\r\n\r\n  for (let [c, r] of NEIGHBOURS) {\r\n    const row = y + r;\r\n    const col = x + c;\r\n    if (checkLimits([col, row], rows, columns)) {\r\n      let cell = board[row][col];\r\n      cell.proximity = cell.proximity + toAdd;\r\n    }\r\n  }\r\n}\r\n\r\nexport function defineMineProximity(board: Cell[][]): void {\r\n  for (let coords of minesCoordinates) {\r\n    setProximity(coords, board, +1);\r\n  }\r\n}\r\n\r\nfunction placeMines(nMines: number, board: Cell[][]): void {\r\n  const rows = board.length;\r\n  const columns = board[0].length;\r\n  let counter = 0;\r\n\r\n  while (counter < nMines) {\r\n    let [x, y]: Coords = [\r\n      getRandomCoordinate(0, columns - 1),\r\n      getRandomCoordinate(0, rows - 1),\r\n    ];\r\n\r\n    let cell = board[y][x];\r\n    if (!cell.hasMine) {\r\n      cell.hasMine = true;\r\n      counter++;\r\n      minesCoordinates.push([x, y]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction buildMatrix<T extends { x: number; y: number }>(\r\n  rows: number,\r\n  columns: number,\r\n  content: T\r\n): T[][] {\r\n  const board: T[][] = [];\r\n  for (let y = 0; y < rows; y++) {\r\n    board.push([]);\r\n    for (let x = 0; x < columns; x++) board[y].push({ ...content, x, y });\r\n  }\r\n  return board;\r\n}\r\n\r\nexport function buildBoard(\r\n  nMines: number,\r\n  rows: number,\r\n  columns: number\r\n): Cell[][] {\r\n  minesCoordinates = [];\r\n  const board: Cell[][] = buildMatrix(rows, columns, BASE_CELL);\r\n  placeMines(nMines, board);\r\n  defineMineProximity(board);\r\n  return board;\r\n}\r\n","import { NEIGHBOURS } from \"../constants\";\r\nimport { Cell, Coords } from \"../types\";\r\nimport { checkLimits, setProximity } from \"./boardSetup\";\r\n\r\nexport function getCoordsFirstFreeCell(\r\n  board: Cell[][]\r\n): [x: number, y: number] {\r\n  const rows = board.length;\r\n  const cols = board[0].length;\r\n  let x = 0;\r\n  let y = 0;\r\n  while (board[y][x].hasMine && y < rows) {\r\n    if (x >= cols) {\r\n      x = 0;\r\n      y++;\r\n    } else {\r\n      x++;\r\n    }\r\n  }\r\n  return [x, y];\r\n}\r\n\r\nexport function rebuildBoard(board: Cell[][]): Cell[][] {\r\n  return [\r\n    ...board.map((row) =>\r\n      row.reduce((acc: Cell[], cell: Cell) => acc.concat({ ...cell }), [])\r\n    ),\r\n  ];\r\n}\r\n\r\nexport function replaceMine(\r\n  [x, y]: Coords,\r\n  board: Cell[][]\r\n): { board: Cell[][] } {\r\n  const updatedBoard = rebuildBoard(board);\r\n  let [fx, fy] = getCoordsFirstFreeCell(updatedBoard);\r\n\r\n  updatedBoard[y][x].hasMine = false;\r\n  setProximity([x, y], updatedBoard, -1);\r\n  updatedBoard[fy][fx].hasMine = true;\r\n  setProximity([fx, fy], updatedBoard, +1);\r\n\r\n  return { board: updatedBoard };\r\n}\r\n\r\nexport function showAllMines(board: Cell[][]): { board: Cell[][] } {\r\n  return {\r\n    board: board.map((row) =>\r\n      row.map((cell: Cell) => {\r\n        return {\r\n          ...cell,\r\n          isRevealed: cell.hasMine ? true : cell.isRevealed,\r\n        };\r\n      })\r\n    ),\r\n  };\r\n}\r\n\r\nexport function toggleFlag([x, y]: Coords, board: Cell[][], nFlags: number) {\r\n  return {\r\n    board: board.map((row, cy) =>\r\n      row.map((cell, cx) => {\r\n        if (cx === x && cy === y) {\r\n          if (cell.hasFlag) {\r\n            nFlags++;\r\n            return { ...cell, hasFlag: false };\r\n          } else if (nFlags > 0) {\r\n            nFlags--;\r\n            return { ...cell, hasFlag: true };\r\n          }\r\n        }\r\n        return { ...cell };\r\n      })\r\n    ),\r\n    nFlags,\r\n  };\r\n}\r\n\r\nexport function showAndExpand(\r\n  [x, y]: Coords,\r\n  board: Cell[][],\r\n  cellsLeft: number\r\n): { board: Cell[][]; cellsLeft: number } {\r\n  const rows = board.length;\r\n  const cols = board[0].length;\r\n  const updatedBoard = rebuildBoard(board);\r\n\r\n  const revealCell = (x: number, y: number) => {\r\n    const cell = updatedBoard[y][x];\r\n    if (cell.isRevealed || cell.hasFlag || cell.hasMine) return;\r\n    cell.isRevealed = true;\r\n    cellsLeft--;\r\n    if (cell.proximity > 0) return;\r\n\r\n    for (let [c, r] of NEIGHBOURS) {\r\n      c += x;\r\n      r += y;\r\n      if (checkLimits([c, r], rows, cols)) revealCell(c, r);\r\n    }\r\n  };\r\n  revealCell(x, y);\r\n  return { board: updatedBoard, cellsLeft };\r\n}\r\n","import { CAMP_COLORS } from \"../constants\";\r\n\r\nconst getCampColorsPair = (isRevealed: boolean): string[] => {\r\n  return isRevealed\r\n    ? [CAMP_COLORS.LIGHTBROWN, CAMP_COLORS.DARKBROWN]\r\n    : [CAMP_COLORS.LIGHTGREEN, CAMP_COLORS.DARKGREEN];\r\n};\r\n\r\nexport const defineCellColor = (\r\n  x: number,\r\n  y: number,\r\n  isRevealed: boolean\r\n): string => {\r\n  const CAMP_COLORS_PAIR = getCampColorsPair(isRevealed);\r\n  let bg: string;\r\n  if (y % 2 === 0) bg = x % 2 === 0 ? CAMP_COLORS_PAIR[0] : CAMP_COLORS_PAIR[1];\r\n  else bg = x % 2 === 0 ? CAMP_COLORS_PAIR[1] : CAMP_COLORS_PAIR[0];\r\n  return bg;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\ntype StyledCellProp = {\r\n  bg: string;\r\n  color: string;\r\n  mineColor: string;\r\n  isRevealed: boolean;\r\n};\r\n\r\nexport default styled.div<StyledCellProp>`\r\n  width: 35px;\r\n  height: 35px;\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-weight: 600;\r\n  color: ${(props) => props.color};\r\n  background-color: ${(props) => props.bg};\r\n  \r\n  > svg#flag {\r\n    color: rgb(204, 19, 19);\r\n  }\r\n  > .mine {\r\n    width: 50%;\r\n    height: 50%;\r\n    border-radius: 50%;\r\n    background: ${(props) => props.mineColor};\r\n    filter: drop-shadow(0 0.6mm 0.2mm rgba(0,0,0,0.5))\r\n  }\r\n  ::after {\r\n    content: \"\";\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n  }\r\n  :hover::after {\r\n    background-color: ${(props) =>\r\n      !props.isRevealed && \"rgba(255, 255, 255, 0.253)\"};\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFlag } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { COLORS } from \"../../constants\";\r\nimport { defineCellColor } from \"../../helpers\";\r\nimport StyledCell from \"./cell.style\";\r\n\r\ntype CellProps = {\r\n  x: number;\r\n  y: number;\r\n  isRevealed: boolean;\r\n  hasFlag: boolean;\r\n  hasMine: boolean;\r\n  proximity: number;\r\n  onLeftClick: (row: number, column: number) => void;\r\n  onRightClick: (row: number, column: number) => void;\r\n};\r\n\r\nexport default function Cell({\r\n  x,\r\n  y,\r\n  isRevealed,\r\n  hasFlag,\r\n  hasMine,\r\n  proximity,\r\n  onLeftClick,\r\n  onRightClick,\r\n}: CellProps) {\r\n  const bg = defineCellColor(x, y, isRevealed);\r\n\r\n  const mineColor = COLORS[Math.round(Math.random() * (COLORS.length - 1))];\r\n\r\n  const handleLeftClick = () => {\r\n    onLeftClick(y, x);\r\n  };\r\n\r\n  const handleRightClick = (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ) => {\r\n    e.preventDefault();\r\n    onRightClick(y, x);\r\n  };\r\n\r\n  return (\r\n    <StyledCell\r\n      bg={bg}\r\n      color={COLORS[proximity]}\r\n      mineColor={mineColor}\r\n      isRevealed={isRevealed}\r\n      onClick={handleLeftClick}\r\n      onContextMenu={handleRightClick}\r\n    >\r\n      {hasFlag && !isRevealed && <FontAwesomeIcon icon={faFlag} id=\"flag\" />}\r\n      {hasMine && isRevealed && <div className=\"mine\"></div>}\r\n      {isRevealed && !hasMine && proximity > 0 && <p>{proximity}</p>}\r\n    </StyledCell>\r\n  );\r\n}\r\n","import React, { createContext, ReactNode, useReducer } from \"react\";\r\nimport { INITIAL_GAME_STATE } from \"../constants\";\r\nimport { GameAction } from \"../state/actions\";\r\nimport { GameState } from \"../types\";\r\n\r\nexport const MinesweeperContext = createContext<\r\n  [GameState, React.Dispatch<GameAction>]\r\n>([INITIAL_GAME_STATE, () => null]);\r\n\r\nexport type Props = {\r\n  children: ReactNode;\r\n  initialState: GameState;\r\n  reducer: (state: GameState, action: GameAction) => GameState;\r\n};\r\n\r\nexport const MinesweeperProvider = ({\r\n  children,\r\n  reducer,\r\n  initialState,\r\n}: Props) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <MinesweeperContext.Provider value={[state, dispatch]}>\r\n      {children}\r\n    </MinesweeperContext.Provider>\r\n  );\r\n};\r\n","import { Level } from \"../types\";\r\n\r\nexport enum ActionType {\r\n  BUILD_BOARD,\r\n  START_GAME,\r\n  SET_VICTORY,\r\n  SET_GAME_OVER,\r\n  RESET_GAME,\r\n  CHANGE_LEVEL,\r\n  PLACE_FLAG,\r\n  REVEAL_CELLS,\r\n  REPLACE_MINE,\r\n}\r\n\r\nexport type GameAction =\r\n  | {\r\n      type: ActionType.BUILD_BOARD;\r\n    }\r\n  | {\r\n      type: ActionType.START_GAME;\r\n    }\r\n  | {\r\n      type: ActionType.SET_VICTORY;\r\n    }\r\n  | {\r\n      type: ActionType.SET_GAME_OVER;\r\n    }\r\n  | {\r\n      type: ActionType.RESET_GAME;\r\n    }\r\n  | {\r\n      type: ActionType.CHANGE_LEVEL;\r\n      level: Level;\r\n    }\r\n  | {\r\n      type: ActionType.REVEAL_CELLS;\r\n      coords: [x: number, y: number];\r\n    }\r\n  | {\r\n      type: ActionType.PLACE_FLAG;\r\n      coords: [x: number, y: number];\r\n    }\r\n  | {\r\n      type: ActionType.REPLACE_MINE;\r\n      coords: [x: number, y: number];\r\n    };\r\n","import { GameState, GameStatus } from \"../types\";\r\nimport { GameAction, ActionType } from \"./actions\";\r\nimport {\r\n  buildBoard,\r\n  showAllMines,\r\n  showAndExpand,\r\n  toggleFlag,\r\n  replaceMine,\r\n} from \"../helpers\";\r\n\r\nexport const reducer = (state: GameState, action: GameAction): GameState => {\r\n  switch (action.type) {\r\n    case ActionType.BUILD_BOARD:\r\n      return {\r\n        ...state,\r\n        board: buildBoard(\r\n          state.level.mines,\r\n          state.level.rows,\r\n          state.level.columns\r\n        ),\r\n      };\r\n    case ActionType.START_GAME:\r\n      return {\r\n        ...state,\r\n        status: GameStatus.IN_PROGRESS,\r\n      };\r\n    case ActionType.SET_VICTORY:\r\n      return {\r\n        ...state,\r\n        status: GameStatus.VICTORY,\r\n      };\r\n    case ActionType.SET_GAME_OVER:\r\n      return {\r\n        ...state,\r\n        status: GameStatus.GAME_OVER,\r\n        ...showAllMines(state.board),\r\n      };\r\n    case ActionType.REVEAL_CELLS:\r\n      return {\r\n        ...state,\r\n        ...showAndExpand(action.coords, state.board, state.cellsLeft),\r\n      };\r\n    case ActionType.PLACE_FLAG:\r\n      return {\r\n        ...state,\r\n        ...toggleFlag(action.coords, state.board, state.nFlags),\r\n      };\r\n    case ActionType.REPLACE_MINE:\r\n      console.log(\"REPLACE MINE ON FIRST CLICK\");\r\n      return {\r\n        ...state,\r\n        ...replaceMine(action.coords, state.board),\r\n      };\r\n    case ActionType.RESET_GAME:\r\n      return {\r\n        ...state,\r\n        status: GameStatus.TO_START,\r\n        board: buildBoard(\r\n          state.level.mines,\r\n          state.level.rows,\r\n          state.level.columns\r\n        ),\r\n        cellsLeft: state.level.columns * state.level.rows - state.level.mines,\r\n        nFlags: state.level.mines,\r\n      };\r\n    case ActionType.CHANGE_LEVEL:\r\n      const { level } = action;\r\n      return {\r\n        level,\r\n        status: GameStatus.TO_START,\r\n        board: buildBoard(level.mines, level.rows, level.columns),\r\n        cellsLeft: level.columns * level.rows - level.mines,\r\n        nFlags: level.mines,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport CellView from \"../cell/cell.component\";\r\nimport { MinesweeperContext } from \"../../providers\";\r\nimport { GameStatus } from \"../../types\";\r\nimport { ActionType } from \"../../state\";\r\n\r\nexport default function Board() {\r\n  const [{ board, status, level, nFlags }, dispatch] = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  const revealCell = (row: number, col: number): void => {\r\n    const cell = board[row][col];\r\n    if (cell.hasFlag || status > GameStatus.IN_PROGRESS) return;\r\n    if (status === GameStatus.TO_START) {\r\n      dispatch({ type: ActionType.START_GAME });\r\n      if (cell.hasMine)\r\n        dispatch({\r\n          type: ActionType.REPLACE_MINE,\r\n          coords: [col, row],\r\n        });\r\n    } else {\r\n      if (cell.hasMine) {\r\n        dispatch({ type: ActionType.SET_GAME_OVER });\r\n        return;\r\n      }\r\n    }\r\n    dispatch({\r\n      type: ActionType.REVEAL_CELLS,\r\n      coords: [col, row],\r\n    });\r\n  };\r\n\r\n  const placeFlag = (row: number, col: number) => {\r\n    if (status === GameStatus.IN_PROGRESS && nFlags <= level.mines) {\r\n      dispatch({\r\n        type: ActionType.PLACE_FLAG,\r\n        coords: [col, row],\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {board.map((row, y) => (\r\n        <div key={`row-${y}`} style={{ display: \"flex\" }}>\r\n          {row.map((cell, x) => (\r\n            <CellView\r\n              key={`col-${x}`}\r\n              {...cell}\r\n              onLeftClick={revealCell}\r\n              onRightClick={placeFlag}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledTopbar = styled.section`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  text-transform: uppercase;\r\n  font-weight: 600;\r\n  margin-bottom: 10px;\r\n  color: rgb(133, 201, 130);\r\n  svg#flag {\r\n    color: rgb(204, 19, 19);\r\n  }\r\n  > #restart:hover {\r\n    text-decoration: underline;\r\n    color: rgb(207, 203, 56);\r\n  }\r\n`;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faStopwatch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useTimer } from \"../../../hooks\";\r\nimport { MinesweeperContext } from \"../../../providers\";\r\nimport { GameStatus } from \"../../../types\";\r\n\r\nexport function Timer() {\r\n  const [{ status }] = useContext(MinesweeperContext);\r\n  const { time, start, stop, reset } = useTimer();\r\n\r\n  useEffect(() => {\r\n    if (status === GameStatus.TO_START && time !== 0) return reset();\r\n    if (status === GameStatus.IN_PROGRESS) return start();\r\n    return stop();\r\n  }, [reset, start, status, stop, time]);\r\n\r\n  const formatTime = () => {\r\n    return new Date(1000 * time).toISOString().substr(14, 5);\r\n  };\r\n\r\n  return (\r\n    <span>\r\n      <FontAwesomeIcon icon={faStopwatch} id=\"flag\" /> {formatTime()}\r\n    </span>\r\n  );\r\n}\r\n","import { useState, useRef, useCallback, useEffect } from \"react\";\r\n\r\nexport default function useTimer() {\r\n  const [time, setTime] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const timer = useRef<null | NodeJS.Timeout>(null);\r\n\r\n  useEffect(() => {\r\n    if (isActive) {\r\n      timer.current = setInterval(() => {\r\n        setTime((prev) => prev + 1);\r\n      }, 1000);\r\n    } else {\r\n      if (timer.current) clearInterval(timer.current);\r\n    }\r\n    return () => {\r\n      if (timer.current) clearInterval(timer.current);\r\n    };\r\n  }, [isActive]);\r\n\r\n  const start = useCallback(() => {\r\n    setIsActive(true);\r\n  }, []);\r\n\r\n  const stop = useCallback(() => {\r\n    setIsActive(false);\r\n  }, []);\r\n\r\n  const reset = useCallback(() => {\r\n    stop();\r\n    setTime(0);\r\n  }, [stop]);\r\n\r\n  return { time, start, stop, reset };\r\n}\r\n","import React from \"react\";\r\nimport { StyledTopbar } from \"./topbar.style\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFlag } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Timer } from \"./timer.component\";\r\n\r\ntype GameTopbarProps = {\r\n  nFlags: number;\r\n  reset: () => void;\r\n};\r\n\r\nexport function GameTopbar({ nFlags, reset }: GameTopbarProps) {\r\n  return (\r\n    <StyledTopbar>\r\n      <span>\r\n        <FontAwesomeIcon icon={faFlag} id=\"flag\" /> {nFlags}\r\n      </span>\r\n      <Timer />\r\n      <span id=\"restart\" onClick={reset}>\r\n        RESTART\r\n      </span>\r\n    </StyledTopbar>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledMessageContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  position: absolute;\r\n  flex-direction: column;\r\n  z-index: 300;\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  width: 100%;\r\n  height: 100%;\r\n  bottom: 0;\r\n  letter-spacing: 0.1em;\r\n  h2 {\r\n    display: block;\r\n    font-size: 3rem;\r\n    color: rgb(56, 82, 62);\r\n    margin-bottom: 10px;\r\n    text-shadow: 0 1mm 0.8mm rgba(0, 0, 0, 0.2);\r\n  }\r\n  button {\r\n    letter-spacing: 0.1em;\r\n    padding: 10px 20px;\r\n    font-size: 1.1rem;\r\n    border: none;\r\n    background-color: rgb(201, 197, 24);\r\n    color: white;\r\n    filter: drop-shadow(0 0 1mm rgba(0, 0, 0, 0.5));\r\n    :hover {\r\n      background-color: rgb(201, 205, 24);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { GameStatus } from \"../../../types\";\r\nimport { StyledMessageContainer } from \"./message.style\";\r\n\r\ntype MessageBoxProps = {\r\n  state: GameStatus;\r\n  reset: () => void;\r\n};\r\n\r\nexport function MessageBox({ state, reset }: MessageBoxProps) {\r\n  const message = (() => {\r\n    if (state === GameStatus.GAME_OVER) return \"GAME OVER\";\r\n    if (state === GameStatus.VICTORY) return \"VICTORY\";\r\n  })();\r\n  return (\r\n    <StyledMessageContainer>\r\n      <h2>{message}</h2>\r\n      <button onClick={reset}>Play again</button>\r\n    </StyledMessageContainer>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledLevelsBar = styled.section`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 10px;\r\n  button {\r\n    padding: 5px 0;\r\n    color: #ccc;\r\n    font-weight: 700;\r\n    border: 1px solid #ccc;\r\n    flex-grow: 1;\r\n    outline: none;\r\n    background: none;\r\n    :hover {\r\n      color: rgb(207, 203, 56);\r\n    };\r\n    &.active {\r\n      background-color: rgb(56, 82, 62);\r\n      color: white;\r\n      border: none;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledLevelsBar } from \"./levels.style\";\r\n\r\ntype LevelsProps = {\r\n  changeLevel: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n  active: string;\r\n};\r\n\r\nexport function Levels({ changeLevel, active }: LevelsProps) {\r\n  return (\r\n    <StyledLevelsBar>\r\n      <button\r\n        onClick={changeLevel}\r\n        value=\"EASY\"\r\n        className={active === \"EASY\" ? \"active\" : \"\"}\r\n      >\r\n        EASY\r\n      </button>\r\n      <button\r\n        onClick={changeLevel}\r\n        value=\"MEDIUM\"\r\n        className={active === \"MEDIUM\" ? \"active\" : \"\"}\r\n      >\r\n        MEDIUM\r\n      </button>\r\n      <button\r\n        onClick={changeLevel}\r\n        value=\"HARD\"\r\n        className={active === \"HARD\" ? \"active\" : \"\"}\r\n      >\r\n        HARD\r\n      </button>\r\n    </StyledLevelsBar>\r\n  );\r\n}\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport Board from \"../board/baoard.component\";\r\nimport { GameTopbar } from \"./topbar/topbar.component\";\r\nimport { MessageBox } from \"./messagebox/message.component\";\r\nimport { Levels } from \"./levels/levels.component\";\r\nimport { MinesweeperContext } from \"../../providers\";\r\nimport { ActionType } from \"../../state\";\r\nimport { LEVELS } from \"../../constants\";\r\n\r\nexport default function Minesweeper() {\r\n  const [{ status, cellsLeft, nFlags, level }, dispatch] = useContext(\r\n    MinesweeperContext\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: ActionType.BUILD_BOARD });\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (cellsLeft === 0) dispatch({ type: ActionType.SET_VICTORY });\r\n  }, [dispatch, cellsLeft]);\r\n\r\n  const resetGame = (): void => {\r\n    dispatch({ type: ActionType.RESET_GAME });\r\n  };\r\n\r\n  const changeLevel = (\r\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\r\n  ): void => {\r\n    const value = (e.target as HTMLButtonElement).value;\r\n    dispatch({\r\n      type: ActionType.CHANGE_LEVEL,\r\n      level: LEVELS[value],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <h1>Minesweeper</h1>\r\n      <Levels changeLevel={changeLevel} active={level.difficulty} />\r\n      <GameTopbar nFlags={nFlags} reset={resetGame} />\r\n      <section style={{ position: \"relative\" }}>\r\n        {status > 1 && <MessageBox reset={resetGame} state={status} />}\r\n        <Board />\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Minesweeper from \"./minesweeper/minesweeper.component\";\r\nimport { MinesweeperProvider } from \"../providers\";\r\nimport { reducer } from \"../state\";\r\nimport { INITIAL_GAME_STATE } from \"../constants\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MinesweeperProvider initialState={INITIAL_GAME_STATE} reducer={reducer}>\r\n        <Minesweeper />\r\n      </MinesweeperProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}