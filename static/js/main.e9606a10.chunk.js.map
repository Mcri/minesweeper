{"version":3,"sources":["types/index.ts","constants/index.ts","helpers/boardSetup.ts","helpers/boardInteractions.ts","helpers/cellColors.ts","components/cell/cell.style.ts","components/cell/cell.component.tsx","providers/minesweeper.provider.tsx","state/actions.ts","state/reducer.ts","components/board/baoard.component.tsx","components/minesweeper/topbar/topbar.style.ts","components/minesweeper/topbar/timer.component.tsx","hooks/useTimer.ts","components/minesweeper/topbar/topbar.component.tsx","components/minesweeper/messagebox/message.style.ts","components/minesweeper/messagebox/message.component.tsx","components/minesweeper/levels/levels.style.ts","components/minesweeper/levels/levels.component.tsx","components/minesweeper/minesweeper.component.tsx","components/App.tsx","index.tsx"],"names":["GameStatus","NEIGHBOURS","LEVELS","EASY","difficulty","rows","columns","mines","MEDIUM","HARD","INITIAL_GAME_STATE","level","status","TO_START","board","nFlags","cellsLeft","BASE_CELL","x","y","hasMine","hasFlag","isRevealed","proximity","COLORS","CAMP_COLORS","minesCoordinates","getRandomCoordinate","min","max","Math","floor","random","checkLimits","col","row","setProximity","toAdd","length","c","cell","buildBoard","nMines","content","push","buildMatrix","counter","placeMines","defineMineProximity","rebuildBoard","map","reduce","acc","concat","showAllMines","defineCellColor","CAMP_COLORS_PAIR","getCampColorsPair","styled","div","props","color","bg","mineColor","Cell","onLeftClick","onRightClick","round","onClick","onContextMenu","e","preventDefault","icon","faFlag","id","className","ActionType","MinesweeperContext","createContext","MinesweeperProvider","children","reducer","initialState","useReducer","state","dispatch","Provider","value","action","type","BUILD_BOARD","START_GAME","IN_PROGRESS","SET_VICTORY","VICTORY","SET_GAME_OVER","GAME_OVER","REVEAL_CELLS","cols","updatedBoard","revealCell","r","showAndExpand","coords","PLACE_FLAG","cy","cx","toggleFlag","REPLACE_MINE","getCoordsFirstFreeCell","fx","fy","replaceMine","RESET_GAME","CHANGE_LEVEL","Board","useContext","placeFlag","style","display","StyledTopbar","section","Timer","useState","time","setTime","isActive","setIsActive","timer","useRef","useEffect","current","setInterval","prev","clearInterval","start","useCallback","stop","reset","useTimer","faStopwatch","Date","toISOString","substr","GameTopbar","StyledMessageContainer","MessageBox","message","undefined","StyledLevelsBar","Levels","changeLevel","active","Minesweeper","resetGame","target","position","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IAEYA,E,sFAAAA,O,uBAAAA,I,6BAAAA,I,yBAAAA,I,sBAAAA,M,KCAL,IAAMC,EAAuB,CAClC,EAAE,GAAI,GACN,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,IAGOC,EAAmC,CAC9CC,KAAM,CACJC,WAAY,OACZC,KAAM,GACNC,QAAS,GACTC,MAAO,IAETC,OAAQ,CACNJ,WAAY,SACZC,KAAM,GACNC,QAAS,GACTC,MAAO,IAETE,KAAM,CACJL,WAAY,OACZC,KAAM,GACNC,QAAS,GACTC,MAAO,KAIEG,EAAgC,CAC3CC,MAAOT,EAAOC,KACdS,OAAQZ,EAAWa,SACnBC,MAAO,GACPC,OAAQb,EAAOC,KAAKI,MACpBS,UAAWd,EAAOC,KAAKE,KAAOH,EAAOC,KAAKG,QAAUJ,EAAOC,KAAKI,OAGrDU,EAAkB,CAC7BC,EAAG,EACHC,EAAG,EACHC,SAAS,EACTC,SAAS,EACTC,YAAY,EACZC,UAAW,GAGAC,EAAS,CACpB,mBACA,mBACA,mBACA,mBACA,mBAGWC,EACC,qBADDA,EAEA,qBAFAA,EAGC,qBAHDA,EAIA,qB,QC5DTC,EAA6B,GAEjC,SAASC,EAAoBC,EAAaC,GACxC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAGhD,SAASK,EAAT,EAEL5B,EACAC,GACU,IAAD,mBAHR4B,EAGQ,KAHHC,EAGG,KACT,OAAOA,GAAO,GAAKA,GAAO9B,EAAO,GAAK6B,GAAO,GAAKA,GAAO5B,EAAU,EAG9D,SAAS8B,EAAT,EAAsCtB,EAAiBuB,GAAgB,IAAD,qBAA/CnB,EAA+C,KAA5CC,EAA4C,KACrEd,EAAOS,EAAMwB,OACbhC,EAAUQ,EAAM,GAAGwB,OAFkD,cAIxDrC,GAJwD,IAI3E,2BAA+B,CAAC,IAAD,yBAArBsC,EAAqB,KACvBJ,EAAMhB,EADiB,KAEvBe,EAAMhB,EAAIqB,EAChB,GAAIN,EAAY,CAACC,EAAKC,GAAM9B,EAAMC,GAAU,CAC1C,IAAIkC,EAAO1B,EAAMqB,GAAKD,GACtBM,EAAKjB,UAAYiB,EAAKjB,UAAYc,IATqC,+BAqDtE,SAASI,EACdC,EACArC,EACAC,GAEAoB,EAAmB,GACnB,IAAMZ,EAnBR,SACET,EACAC,EACAqC,GAGA,IADA,IAAM7B,EAAe,GACZK,EAAI,EAAGA,EAAId,EAAMc,IAAK,CAC7BL,EAAM8B,KAAK,IACX,IAAK,IAAI1B,EAAI,EAAGA,EAAIZ,EAASY,IAAKJ,EAAMK,GAAGyB,KAAT,2BAAmBD,GAAnB,IAA4BzB,IAAGC,OAEnE,OAAOL,EASiB+B,CAAYxC,EAAMC,EAASW,GAGnD,OA1CF,SAAoByB,EAAgB5B,GAKlC,IAJA,IAAMT,EAAOS,EAAMwB,OACbhC,EAAUQ,EAAM,GAAGwB,OACrBQ,EAAU,EAEPA,EAAUJ,GAAQ,CAAC,IAAD,EACF,CACnBf,EAAoB,EAAGrB,EAAU,GACjCqB,EAAoB,EAAGtB,EAAO,IAF3Ba,EADkB,KACfC,EADe,KAMnBqB,EAAO1B,EAAMK,GAAGD,GACfsB,EAAKpB,UACRoB,EAAKpB,SAAU,EACf0B,IACApB,EAAiBkB,KAAK,CAAC1B,EAAGC,MAyB9B4B,CAAWL,EAAQ5B,GA9Cd,SAA6BA,GAAwB,IAAD,gBACtCY,GADsC,IACzD,2BACEU,EADmC,QACdtB,EAAO,GAF2B,+BA+CzDkC,CAAoBlC,GACbA,E,YCzDF,SAASmC,EAAanC,GAC3B,OAAO,YACFA,EAAMoC,KAAI,SAACf,GAAD,OACXA,EAAIgB,QAAO,SAACC,EAAaZ,GAAd,OAA6BY,EAAIC,OAAJ,eAAgBb,MAAS,QAoBhE,SAASc,EAAaxC,GAC3B,MAAO,CACLA,MAAOA,EAAMoC,KAAI,SAACf,GAAD,OACfA,EAAIe,KAAI,SAACV,GACP,OAAO,2BACFA,GADL,IAEElB,aAAYkB,EAAKpB,SAAiBoB,EAAKlB,oBCjDjD,IAMaiC,EAAkB,SAC7BrC,EACAC,EACAG,GAEA,IAAMkC,EAXkB,SAAClC,GACzB,OAAOA,EACH,CAACG,EAAwBA,GACzB,CAACA,EAAwBA,GAQJgC,CAAkBnC,GAI3C,OAFIH,EAAI,IAAM,EAAQD,EAAI,IAAM,EAAIsC,EAAiB,GAAKA,EAAiB,GACjEtC,EAAI,IAAM,EAAIsC,EAAiB,GAAKA,EAAiB,I,spBCPlDE,UAAOC,IAAtB,KAQW,SAACC,GAAD,OAAWA,EAAMC,SACN,SAACD,GAAD,OAAWA,EAAME,MASrB,SAACF,GAAD,OAAWA,EAAMG,aAYX,SAACH,GAAD,OACjBA,EAAMtC,YAAc,gCCtBZ,SAAS0C,EAAT,GASA,IARb9C,EAQY,EARZA,EACAC,EAOY,EAPZA,EACAG,EAMY,EANZA,WACAD,EAKY,EALZA,QACAD,EAIY,EAJZA,QACAG,EAGY,EAHZA,UACA0C,EAEY,EAFZA,YACAC,EACY,EADZA,aAEMJ,EAAKP,EAAgBrC,EAAGC,EAAGG,GAE3ByC,EAAYvC,EAAOM,KAAKqC,MAAMrC,KAAKE,UAAYR,EAAOc,OAAS,KAarE,OACE,eAAC,EAAD,CACEwB,GAAIA,EACJD,MAAOrC,EAAOD,GACdwC,UAAWA,EACXzC,WAAYA,EACZ8C,QAjBoB,WACtBH,EAAY9C,EAAGD,IAiBbmD,cAdqB,SACvBC,GAEAA,EAAEC,iBACFL,EAAa/C,EAAGD,IAIhB,UAQGG,IAAYC,GAAc,cAAC,IAAD,CAAiBkD,KAAMC,IAAQC,GAAG,SAC5DtD,GAAWE,GAAc,qBAAKqD,UAAU,SACxCrD,IAAeF,GAAWG,EAAY,GAAK,4BAAIA,OCjD/C,ICHKqD,EDGCC,EAAqBC,wBAEhC,CAACpE,EAAoB,kBAAM,QAQhBqE,EAAsB,SAAC,GAItB,IAHZC,EAGW,EAHXA,SACAC,EAEW,EAFXA,QACAC,EACW,EADXA,aACW,EACeC,qBAAWF,EAASC,GADnC,mBACJE,EADI,KACGC,EADH,KAGX,OACE,cAACR,EAAmBS,SAApB,CAA6BC,MAAO,CAACH,EAAOC,GAA5C,SACGL,M,SCtBKJ,O,6BAAAA,I,2BAAAA,I,6BAAAA,I,iCAAAA,I,2BAAAA,I,+BAAAA,I,2BAAAA,I,+BAAAA,I,gCAAAA,M,KCQL,IAAMK,EAAU,SAACG,EAAkBI,GACxC,OAAQA,EAAOC,MACb,KAAKb,EAAWc,YACd,OAAO,2BACFN,GADL,IAEEtE,MAAO2B,EACL2C,EAAMzE,MAAMJ,MACZ6E,EAAMzE,MAAMN,KACZ+E,EAAMzE,MAAML,WAGlB,KAAKsE,EAAWe,WACd,OAAO,2BACFP,GADL,IAEExE,OAAQZ,EAAW4F,cAEvB,KAAKhB,EAAWiB,YACd,OAAO,2BACFT,GADL,IAEExE,OAAQZ,EAAW8F,SAChBxC,EAAa8B,EAAMtE,QAE1B,KAAK8D,EAAWmB,cACd,OAAO,2BACFX,GADL,IAEExE,OAAQZ,EAAWgG,WAChB1C,EAAa8B,EAAMtE,QAE1B,KAAK8D,EAAWqB,aACd,OAAO,2BACFb,GNsCJ,WAELtE,EACAE,GACyC,IAAD,mBAHvCE,EAGuC,KAHpCC,EAGoC,KAClCd,EAAOS,EAAMwB,OACb4D,EAAOpF,EAAM,GAAGwB,OAChB6D,EAAelD,EAAanC,GAgBlC,OAdmB,SAAbsF,EAAclF,EAAWC,GAC7B,IAAMqB,EAAO2D,EAAahF,GAAGD,GAC7B,KAAIsB,EAAKlB,YAAckB,EAAKnB,SAAWmB,EAAKpB,WAC5CoB,EAAKlB,YAAa,EAClBN,MACIwB,EAAKjB,UAAY,IAArB,CAL2C,oBAOxBtB,GAPwB,IAO3C,2BAA+B,CAAC,IAAD,yBAArBsC,EAAqB,KAAlB8D,EAAkB,KAGzBpE,EAAY,CAFhBM,GAAKrB,EACLmF,GAAKlF,GACmBd,EAAM6F,IAAOE,EAAW7D,EAAG8D,IAVV,gCAa7CD,CAAWlF,EAAGC,GACP,CAAEL,MAAOqF,EAAcnF,aM5DrBsF,CAAcd,EAAOe,OAAQnB,EAAMtE,MAAOsE,EAAMpE,YAEvD,KAAK4D,EAAW4B,WACd,OAAO,2BACFpB,GNaJ,WAAoCtE,EAAiBC,GAAiB,IAAD,mBAAhDG,EAAgD,KAA7CC,EAA6C,KAC1E,MAAO,CACLL,MAAOA,EAAMoC,KAAI,SAACf,EAAKsE,GAAN,OACftE,EAAIe,KAAI,SAACV,EAAMkE,GACb,GAAIA,IAAOxF,GAAKuF,IAAOtF,EAAG,CACxB,GAAIqB,EAAKnB,QAEP,OADAN,IACO,2BAAKyB,GAAZ,IAAkBnB,SAAS,IACtB,GAAIN,EAAS,EAElB,OADAA,IACO,2BAAKyB,GAAZ,IAAkBnB,SAAS,IAG/B,OAAO,eAAKmB,SAGhBzB,UM5BO4F,CAAWnB,EAAOe,OAAQnB,EAAMtE,MAAOsE,EAAMrE,SAEpD,KAAK6D,EAAWgC,aACd,OAAO,2BACFxB,GNpBJ,WAELtE,GACsB,IAAD,mBAFpBI,EAEoB,KAFjBC,EAEiB,KACfgF,EAAelD,EAAanC,GADb,EA7BhB,SACLA,GAMA,IAJA,IAAMT,EAAOS,EAAMwB,OACb4D,EAAOpF,EAAM,GAAGwB,OAClBpB,EAAI,EACJC,EAAI,EACDL,EAAMK,GAAGD,GAAGE,SAAWD,EAAId,GAC5Ba,GAAKgF,GACPhF,EAAI,EACJC,KAEAD,IAGJ,MAAO,CAACA,EAAGC,GAgBI0F,CAAuBV,GAFjB,mBAEhBW,EAFgB,KAEZC,EAFY,KASrB,OALAZ,EAAahF,GAAGD,GAAGE,SAAU,EAC7BgB,EAAa,CAAClB,EAAGC,GAAIgF,GAAe,GACpCA,EAAaY,GAAID,GAAI1F,SAAU,EAC/BgB,EAAa,CAAC0E,EAAIC,GAAKZ,EAAc,GAE9B,CAAErF,MAAOqF,GMSPa,CAAYxB,EAAOe,OAAQnB,EAAMtE,QAExC,KAAK8D,EAAWqC,WACd,OAAO,2BACF7B,GADL,IAEExE,OAAQZ,EAAWa,SACnBC,MAAO2B,EACL2C,EAAMzE,MAAMJ,MACZ6E,EAAMzE,MAAMN,KACZ+E,EAAMzE,MAAML,SAEdU,UAAWoE,EAAMzE,MAAML,QAAU8E,EAAMzE,MAAMN,KAAO+E,EAAMzE,MAAMJ,MAChEQ,OAAQqE,EAAMzE,MAAMJ,QAExB,KAAKqE,EAAWsC,aAAhB,IACUvG,EAAU6E,EAAV7E,MACR,MAAO,CACLA,QACAC,OAAQZ,EAAWa,SACnBC,MAAO2B,EAAW9B,EAAMJ,MAAOI,EAAMN,KAAMM,EAAML,SACjDU,UAAWL,EAAML,QAAUK,EAAMN,KAAOM,EAAMJ,MAC9CQ,OAAQJ,EAAMJ,OAElB,QACE,OAAO6E,ICrEE,SAAS+B,IAAS,IAAD,EACuBC,qBACnDvC,GAF4B,0BACrB/D,EADqB,EACrBA,MAAOF,EADc,EACdA,OAAQD,EADM,EACNA,MAAOI,EADD,EACCA,OAAUsE,EADX,KAKxBe,EAAa,SAACjE,EAAaD,GAC/B,IAAMM,EAAO1B,EAAMqB,GAAKD,GACxB,KAAIM,EAAKnB,SAAWT,EAASZ,EAAW4F,aAAxC,CACA,GAAIhF,IAAWZ,EAAWa,SACxBwE,EAAS,CAAEI,KAAMb,EAAWe,aACxBnD,EAAKpB,SACPiE,EAAS,CACPI,KAAMb,EAAWgC,aACjBL,OAAQ,CAACrE,EAAKC,UAGlB,GAAIK,EAAKpB,QAEP,YADAiE,EAAS,CAAEI,KAAMb,EAAWmB,gBAIhCV,EAAS,CACPI,KAAMb,EAAWqB,aACjBM,OAAQ,CAACrE,EAAKC,OAIZkF,EAAY,SAAClF,EAAaD,GAC1BtB,IAAWZ,EAAW4F,aAAe7E,GAAUJ,EAAMJ,OACvD8E,EAAS,CACPI,KAAMb,EAAW4B,WACjBD,OAAQ,CAACrE,EAAKC,MAKpB,OACE,8BACGrB,EAAMoC,KAAI,SAACf,EAAKhB,GAAN,OACT,qBAAsBmG,MAAO,CAAEC,QAAS,QAAxC,SACGpF,EAAIe,KAAI,SAACV,EAAMtB,GAAP,OACP,cAAC8C,EAAD,2BAEMxB,GAFN,IAGEyB,YAAamC,EACblC,aAAcmD,IAJhB,cACcnG,QAHlB,cAAiBC,S,iXC3ClB,IAAMqG,EAAe9D,IAAO+D,QAAV,KCKlB,SAASC,IAAS,IAAD,EACDN,qBAAWvC,GAAvBjE,EADa,oBACbA,OADa,ECLT,WAAqB,IAAD,EACT+G,mBAAS,GADA,mBAC1BC,EAD0B,KACpBC,EADoB,OAEDF,oBAAS,GAFR,mBAE1BG,EAF0B,KAEhBC,EAFgB,KAG3BC,EAAQC,iBAA8B,MAE5CC,qBAAU,WAQR,OAPIJ,EACFE,EAAMG,QAAUC,aAAY,WAC1BP,GAAQ,SAACQ,GAAD,OAAUA,EAAO,OACxB,KAECL,EAAMG,SAASG,cAAcN,EAAMG,SAElC,WACDH,EAAMG,SAASG,cAAcN,EAAMG,YAExC,CAACL,IAEJ,IAAMS,EAAQC,uBAAY,WACxBT,GAAY,KACX,IAEGU,EAAOD,uBAAY,WACvBT,GAAY,KACX,IAEGW,EAAQF,uBAAY,WACxBC,IACAZ,EAAQ,KACP,CAACY,IAEJ,MAAO,CAAEb,OAAMW,QAAOE,OAAMC,SDxBSC,GAA7Bf,EAFc,EAEdA,KAAMW,EAFQ,EAERA,MAAOE,EAFC,EAEDA,KAAMC,EAFL,EAEKA,MAE3BR,qBAAU,WACR,OAAItH,IAAWZ,EAAWa,UAAqB,IAAT+G,EAAmBc,IACrD9H,IAAWZ,EAAW4F,YAAoB2C,IACvCE,MACN,CAACC,EAAOH,EAAO3H,EAAQ6H,EAAMb,IAMhC,OACE,iCACE,cAAC,IAAD,CAAiBpD,KAAMoE,IAAalE,GAAG,SADzC,IAJO,IAAImE,KAAK,IAAOjB,GAAMkB,cAAcC,OAAO,GAAI,MEPnD,SAASC,EAAT,GAAyD,IAAnCjI,EAAkC,EAAlCA,OAAQ2H,EAA0B,EAA1BA,MACnC,OACE,eAAClB,EAAD,WACE,iCACE,cAAC,IAAD,CAAiBhD,KAAMC,IAAQC,GAAG,SADpC,IAC+C3D,KAE/C,cAAC2G,EAAD,IACA,sBAAMhD,GAAG,UAAUN,QAASsE,EAA5B,wB,08BChBC,IAAMO,EAAyBvF,IAAOC,IAAV,KCO5B,SAASuF,EAAT,GAAwD,IAAD,EAAjC9D,EAAiC,EAAjCA,MAAOsD,EAA0B,EAA1BA,MAC5BS,GAAgC,mBACnCnJ,EAAWgG,UAAa,aADW,cAEnChG,EAAW8F,QAAW,WAFa,GAItC,OACE,eAACmD,EAAD,WACE,oBAAItE,UAAWS,IAAUpF,EAAWgG,UAAY,gBAAaoD,EAA7D,SAAyED,EAAQ/D,KACjF,wBAAQhB,QAASsE,EAAjB,2B,geCfC,IAAMW,EAAkB3F,IAAO+D,QAAV,KCMrB,SAAS6B,EAAT,GAAuD,IAArCC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,OACpC,OACE,eAACH,EAAD,WACE,wBACEjF,QAASmF,EACThE,MAAM,OACNZ,UAAsB,SAAX6E,EAAoB,SAAW,GAH5C,kBAOA,wBACEpF,QAASmF,EACThE,MAAM,SACNZ,UAAsB,WAAX6E,EAAsB,SAAW,GAH9C,oBAOA,wBACEpF,QAASmF,EACThE,MAAM,OACNZ,UAAsB,SAAX6E,EAAoB,SAAW,GAH5C,qBChBS,SAASC,IAAe,IAAD,EACqBrC,qBACvDvC,GAFkC,0BAC3BjE,EAD2B,EAC3BA,OAAQI,EADmB,EACnBA,UAAWD,EADQ,EACRA,OAAQJ,EADA,EACAA,MAAS0E,EADT,KAKpC6C,qBAAU,WACR7C,EAAS,CAAEI,KAAMb,EAAWc,gBAC3B,CAACL,IAEJ6C,qBAAU,WACU,IAAdlH,GAAiBqE,EAAS,CAAEI,KAAMb,EAAWiB,gBAChD,CAACR,EAAUrE,IAEd,IAAM0I,EAAY,WAChBrE,EAAS,CAAEI,KAAMb,EAAWqC,cAa9B,OACE,iCACE,6CACA,cAACqC,EAAD,CAAQC,YAbQ,SAClBjF,GAEA,IAAMiB,EAASjB,EAAEqF,OAA6BpE,MAC9CF,EAAS,CACPI,KAAMb,EAAWsC,aACjBvG,MAAOT,EAAOqF,MAOoBiE,OAAQ7I,EAAMP,aAChD,cAAC4I,EAAD,CAAYjI,OAAQA,EAAQ2H,MAAOgB,IACnC,0BAASpC,MAAO,CAAEsC,SAAU,YAA5B,UACGhJ,EAAS,GAAK,cAACsI,EAAD,CAAYR,MAAOgB,EAAWtE,MAAOxE,IACpD,cAACuG,EAAD,UC3BO0C,OAVf,WACE,OACE,qBAAKlF,UAAU,MAAf,SACE,cAAC,EAAD,CAAqBO,aAAcxE,EAAoBuE,QAASA,EAAhE,SACE,cAACwE,EAAD,SCLRK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e9606a10.chunk.js","sourcesContent":["export type Coords = [x: number, y: number];\n\nexport enum GameStatus {\n  TO_START,\n  IN_PROGRESS,\n  GAME_OVER,\n  VICTORY,\n}\n\nexport type Level = Readonly<{\n  difficulty: string;\n  rows: number;\n  columns: number;\n  mines: number;\n}>;\n\nexport type Cell = {\n  x: number;\n  y: number;\n  hasMine: boolean;\n  isRevealed: boolean;\n  hasFlag: boolean;\n  proximity: number;\n};\n\nexport type GameState = Readonly<{\n  level: Level;\n  status: GameStatus;\n  board: Cell[][];\n  nFlags: number;\n  cellsLeft: number;\n}>;\n","import { Cell, Coords, GameState, GameStatus, Level } from \"../types\";\n\nexport const NEIGHBOURS: Coords[] = [\n  [-1, -1],\n  [0, -1],\n  [1, -1],\n  [-1, 0],\n  [1, 0],\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n];\n\nexport const LEVELS: { [key: string]: Level } = {\n  EASY: {\n    difficulty: \"EASY\",\n    rows: 10,\n    columns: 10,\n    mines: 15,\n  },\n  MEDIUM: {\n    difficulty: \"MEDIUM\",\n    rows: 15,\n    columns: 15,\n    mines: 35,\n  },\n  HARD: {\n    difficulty: \"HARD\",\n    rows: 15,\n    columns: 15,\n    mines: 50,\n  },\n};\n\nexport const INITIAL_GAME_STATE: GameState = {\n  level: LEVELS.EASY,\n  status: GameStatus.TO_START,\n  board: [],\n  nFlags: LEVELS.EASY.mines,\n  cellsLeft: LEVELS.EASY.rows * LEVELS.EASY.columns - LEVELS.EASY.mines,\n};\n\nexport const BASE_CELL: Cell = {\n  x: 0,\n  y: 0,\n  hasMine: false,\n  hasFlag: false,\n  isRevealed: false,\n  proximity: 0,\n};\n\nexport const COLORS = [\n  \"rgb(45, 47, 163)\",\n  \"rgb(57, 128, 25)\",\n  \"rgb(211, 76, 22)\",\n  \"rgb(204, 19, 19)\",\n  \"rgb(156, 6, 56)\",\n];\n\nexport const CAMP_COLORS = {\n  LIGHTGREEN: \"rgb(170, 219, 124)\",\n  DARKGREEN: \"rgb(133, 201, 130)\",\n  LIGHTBROWN: \"rgb(180, 156, 125)\",\n  DARKBROWN: \"rgb(156, 138, 115)\",\n};\n","import { BASE_CELL, NEIGHBOURS } from \"../constants\";\nimport { Cell, Coords } from \"../types\";\n\nlet minesCoordinates: Coords[] = [];\n\nfunction getRandomCoordinate(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function checkLimits(\n  [col, row]: Coords,\n  rows: number,\n  columns: number\n): boolean {\n  return row >= 0 && row <= rows - 1 && col >= 0 && col <= columns - 1;\n}\n\nexport function setProximity([x, y]: Coords, board: Cell[][], toAdd: number) {\n  const rows = board.length;\n  const columns = board[0].length;\n\n  for (let [c, r] of NEIGHBOURS) {\n    const row = y + r;\n    const col = x + c;\n    if (checkLimits([col, row], rows, columns)) {\n      let cell = board[row][col];\n      cell.proximity = cell.proximity + toAdd;\n    }\n  }\n}\n\nexport function defineMineProximity(board: Cell[][]): void {\n  for (let coords of minesCoordinates) {\n    setProximity(coords, board, +1);\n  }\n}\n\nfunction placeMines(nMines: number, board: Cell[][]): void {\n  const rows = board.length;\n  const columns = board[0].length;\n  let counter = 0;\n\n  while (counter < nMines) {\n    let [x, y]: Coords = [\n      getRandomCoordinate(0, columns - 1),\n      getRandomCoordinate(0, rows - 1),\n    ];\n\n    let cell = board[y][x];\n    if (!cell.hasMine) {\n      cell.hasMine = true;\n      counter++;\n      minesCoordinates.push([x, y]);\n    }\n  }\n}\n\nfunction buildMatrix<T extends { x: number; y: number }>(\n  rows: number,\n  columns: number,\n  content: T\n): T[][] {\n  const board: T[][] = [];\n  for (let y = 0; y < rows; y++) {\n    board.push([]);\n    for (let x = 0; x < columns; x++) board[y].push({ ...content, x, y });\n  }\n  return board;\n}\n\nexport function buildBoard(\n  nMines: number,\n  rows: number,\n  columns: number\n): Cell[][] {\n  minesCoordinates = [];\n  const board: Cell[][] = buildMatrix(rows, columns, BASE_CELL);\n  placeMines(nMines, board);\n  defineMineProximity(board);\n  return board;\n}\n","import { NEIGHBOURS } from \"../constants\";\nimport { Cell, Coords } from \"../types\";\nimport { checkLimits, setProximity } from \"./boardSetup\";\n\nexport function getCoordsFirstFreeCell(\n  board: Cell[][]\n): [x: number, y: number] {\n  const rows = board.length;\n  const cols = board[0].length;\n  let x = 0;\n  let y = 0;\n  while (board[y][x].hasMine && y < rows) {\n    if (x >= cols) {\n      x = 0;\n      y++;\n    } else {\n      x++;\n    }\n  }\n  return [x, y];\n}\n\nexport function rebuildBoard(board: Cell[][]): Cell[][] {\n  return [\n    ...board.map((row) =>\n      row.reduce((acc: Cell[], cell: Cell) => acc.concat({ ...cell }), [])\n    ),\n  ];\n}\n\nexport function replaceMine(\n  [x, y]: Coords,\n  board: Cell[][]\n): { board: Cell[][] } {\n  const updatedBoard = rebuildBoard(board);\n  let [fx, fy] = getCoordsFirstFreeCell(updatedBoard);\n\n  updatedBoard[y][x].hasMine = false;\n  setProximity([x, y], updatedBoard, -1);\n  updatedBoard[fy][fx].hasMine = true;\n  setProximity([fx, fy], updatedBoard, +1);\n\n  return { board: updatedBoard };\n}\n\nexport function showAllMines(board: Cell[][]): { board: Cell[][] } {\n  return {\n    board: board.map((row) =>\n      row.map((cell: Cell) => {\n        return {\n          ...cell,\n          isRevealed: cell.hasMine ? true : cell.isRevealed,\n        };\n      })\n    ),\n  };\n}\n\nexport function toggleFlag([x, y]: Coords, board: Cell[][], nFlags: number) {\n  return {\n    board: board.map((row, cy) =>\n      row.map((cell, cx) => {\n        if (cx === x && cy === y) {\n          if (cell.hasFlag) {\n            nFlags++;\n            return { ...cell, hasFlag: false };\n          } else if (nFlags > 0) {\n            nFlags--;\n            return { ...cell, hasFlag: true };\n          }\n        }\n        return { ...cell };\n      })\n    ),\n    nFlags,\n  };\n}\n\nexport function showAndExpand(\n  [x, y]: Coords,\n  board: Cell[][],\n  cellsLeft: number\n): { board: Cell[][]; cellsLeft: number } {\n  const rows = board.length;\n  const cols = board[0].length;\n  const updatedBoard = rebuildBoard(board);\n\n  const revealCell = (x: number, y: number) => {\n    const cell = updatedBoard[y][x];\n    if (cell.isRevealed || cell.hasFlag || cell.hasMine) return;\n    cell.isRevealed = true;\n    cellsLeft--;\n    if (cell.proximity > 0) return;\n\n    for (let [c, r] of NEIGHBOURS) {\n      c += x;\n      r += y;\n      if (checkLimits([c, r], rows, cols)) revealCell(c, r);\n    }\n  };\n  revealCell(x, y);\n  return { board: updatedBoard, cellsLeft };\n}\n","import { CAMP_COLORS } from \"../constants\";\n\nconst getCampColorsPair = (isRevealed: boolean): string[] => {\n  return isRevealed\n    ? [CAMP_COLORS.LIGHTBROWN, CAMP_COLORS.DARKBROWN]\n    : [CAMP_COLORS.LIGHTGREEN, CAMP_COLORS.DARKGREEN];\n};\n\nexport const defineCellColor = (\n  x: number,\n  y: number,\n  isRevealed: boolean\n): string => {\n  const CAMP_COLORS_PAIR = getCampColorsPair(isRevealed);\n  let bg: string;\n  if (y % 2 === 0) bg = x % 2 === 0 ? CAMP_COLORS_PAIR[0] : CAMP_COLORS_PAIR[1];\n  else bg = x % 2 === 0 ? CAMP_COLORS_PAIR[1] : CAMP_COLORS_PAIR[0];\n  return bg;\n};\n","import styled from \"styled-components\";\n\ntype StyledCellProp = {\n  bg: string;\n  color: string;\n  mineColor: string;\n  isRevealed: boolean;\n};\n\nexport default styled.div<StyledCellProp>`\n  width: 35px;\n  height: 35px;\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: 600;\n  color: ${(props) => props.color};\n  background-color: ${(props) => props.bg};\n  \n  > svg#flag {\n    color: rgb(204, 19, 19);\n  }\n  > .mine {\n    width: 50%;\n    height: 50%;\n    border-radius: 50%;\n    background: ${(props) => props.mineColor};\n    filter: drop-shadow(0 0.6mm 0.2mm rgba(0,0,0,0.5))\n  }\n  ::after {\n    content: \"\";\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    right: 0;\n  }\n  :hover::after {\n    background-color: ${(props) =>\n      !props.isRevealed && \"rgba(255, 255, 255, 0.253)\"};\n  }\n`;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFlag } from \"@fortawesome/free-solid-svg-icons\";\nimport { COLORS } from \"../../constants\";\nimport { defineCellColor } from \"../../helpers\";\nimport StyledCell from \"./cell.style\";\n\ntype CellProps = {\n  x: number;\n  y: number;\n  isRevealed: boolean;\n  hasFlag: boolean;\n  hasMine: boolean;\n  proximity: number;\n  onLeftClick: (row: number, column: number) => void;\n  onRightClick: (row: number, column: number) => void;\n};\n\nexport default function Cell({\n  x,\n  y,\n  isRevealed,\n  hasFlag,\n  hasMine,\n  proximity,\n  onLeftClick,\n  onRightClick,\n}: CellProps) {\n  const bg = defineCellColor(x, y, isRevealed);\n\n  const mineColor = COLORS[Math.round(Math.random() * (COLORS.length - 1))];\n\n  const handleLeftClick = () => {\n    onLeftClick(y, x);\n  };\n\n  const handleRightClick = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => {\n    e.preventDefault();\n    onRightClick(y, x);\n  };\n\n  return (\n    <StyledCell\n      bg={bg}\n      color={COLORS[proximity]}\n      mineColor={mineColor}\n      isRevealed={isRevealed}\n      onClick={handleLeftClick}\n      onContextMenu={handleRightClick}\n    >\n      {hasFlag && !isRevealed && <FontAwesomeIcon icon={faFlag} id=\"flag\" />}\n      {hasMine && isRevealed && <div className=\"mine\"></div>}\n      {isRevealed && !hasMine && proximity > 0 && <p>{proximity}</p>}\n    </StyledCell>\n  );\n}\n","import React, { createContext, ReactNode, useReducer } from \"react\";\nimport { INITIAL_GAME_STATE } from \"../constants\";\nimport { GameAction } from \"../state\";\nimport { GameState } from \"../types\";\n\nexport const MinesweeperContext = createContext<\n  [GameState, React.Dispatch<GameAction>]\n>([INITIAL_GAME_STATE, () => null]);\n\nexport type Props = {\n  children: ReactNode;\n  initialState: GameState;\n  reducer: (state: GameState, action: GameAction) => GameState;\n};\n\nexport const MinesweeperProvider = ({\n  children,\n  reducer,\n  initialState,\n}: Props) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <MinesweeperContext.Provider value={[state, dispatch]}>\n      {children}\n    </MinesweeperContext.Provider>\n  );\n};\n","import { Level } from \"../types\";\n\nexport enum ActionType {\n  BUILD_BOARD,\n  START_GAME,\n  SET_VICTORY,\n  SET_GAME_OVER,\n  RESET_GAME,\n  CHANGE_LEVEL,\n  PLACE_FLAG,\n  REVEAL_CELLS,\n  REPLACE_MINE,\n}\n\nexport type GameAction =\n  | {\n      type: ActionType.BUILD_BOARD;\n    }\n  | {\n      type: ActionType.START_GAME;\n    }\n  | {\n      type: ActionType.SET_VICTORY;\n    }\n  | {\n      type: ActionType.SET_GAME_OVER;\n    }\n  | {\n      type: ActionType.RESET_GAME;\n    }\n  | {\n      type: ActionType.CHANGE_LEVEL;\n      level: Level;\n    }\n  | {\n      type: ActionType.REVEAL_CELLS;\n      coords: [x: number, y: number];\n    }\n  | {\n      type: ActionType.PLACE_FLAG;\n      coords: [x: number, y: number];\n    }\n  | {\n      type: ActionType.REPLACE_MINE;\n      coords: [x: number, y: number];\n    };\n","import { GameState, GameStatus } from \"../types\";\nimport { GameAction, ActionType } from \"./actions\";\nimport {\n  buildBoard,\n  showAllMines,\n  showAndExpand,\n  toggleFlag,\n  replaceMine,\n} from \"../helpers\";\n\nexport const reducer = (state: GameState, action: GameAction): GameState => {\n  switch (action.type) {\n    case ActionType.BUILD_BOARD:\n      return {\n        ...state,\n        board: buildBoard(\n          state.level.mines,\n          state.level.rows,\n          state.level.columns\n        ),\n      };\n    case ActionType.START_GAME:\n      return {\n        ...state,\n        status: GameStatus.IN_PROGRESS,\n      };\n    case ActionType.SET_VICTORY:\n      return {\n        ...state,\n        status: GameStatus.VICTORY,\n        ...showAllMines(state.board),\n      };\n    case ActionType.SET_GAME_OVER:\n      return {\n        ...state,\n        status: GameStatus.GAME_OVER,\n        ...showAllMines(state.board),\n      };\n    case ActionType.REVEAL_CELLS:\n      return {\n        ...state,\n        ...showAndExpand(action.coords, state.board, state.cellsLeft),\n      };\n    case ActionType.PLACE_FLAG:\n      return {\n        ...state,\n        ...toggleFlag(action.coords, state.board, state.nFlags),\n      };\n    case ActionType.REPLACE_MINE:\n      return {\n        ...state,\n        ...replaceMine(action.coords, state.board),\n      };\n    case ActionType.RESET_GAME:\n      return {\n        ...state,\n        status: GameStatus.TO_START,\n        board: buildBoard(\n          state.level.mines,\n          state.level.rows,\n          state.level.columns\n        ),\n        cellsLeft: state.level.columns * state.level.rows - state.level.mines,\n        nFlags: state.level.mines,\n      };\n    case ActionType.CHANGE_LEVEL:\n      const { level } = action;\n      return {\n        level,\n        status: GameStatus.TO_START,\n        board: buildBoard(level.mines, level.rows, level.columns),\n        cellsLeft: level.columns * level.rows - level.mines,\n        nFlags: level.mines,\n      };\n    default:\n      return state;\n  }\n};\n","import React, { useContext } from \"react\";\nimport CellView from \"../cell/cell.component\";\nimport { MinesweeperContext } from \"../../providers\";\nimport { GameStatus } from \"../../types\";\nimport { ActionType } from \"../../state\";\n\nexport default function Board() {\n  const [{ board, status, level, nFlags }, dispatch] = useContext(\n    MinesweeperContext\n  );\n\n  const revealCell = (row: number, col: number): void => {\n    const cell = board[row][col];\n    if (cell.hasFlag || status > GameStatus.IN_PROGRESS) return;\n    if (status === GameStatus.TO_START) {\n      dispatch({ type: ActionType.START_GAME });\n      if (cell.hasMine)\n        dispatch({\n          type: ActionType.REPLACE_MINE,\n          coords: [col, row],\n        });\n    } else {\n      if (cell.hasMine) {\n        dispatch({ type: ActionType.SET_GAME_OVER });\n        return;\n      }\n    }\n    dispatch({\n      type: ActionType.REVEAL_CELLS,\n      coords: [col, row],\n    });\n  };\n\n  const placeFlag = (row: number, col: number) => {\n    if (status === GameStatus.IN_PROGRESS && nFlags <= level.mines) {\n      dispatch({\n        type: ActionType.PLACE_FLAG,\n        coords: [col, row],\n      });\n    }\n  };\n\n  return (\n    <div>\n      {board.map((row, y) => (\n        <div key={`row-${y}`} style={{ display: \"flex\" }}>\n          {row.map((cell, x) => (\n            <CellView\n              key={`col-${x}`}\n              {...cell}\n              onLeftClick={revealCell}\n              onRightClick={placeFlag}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const StyledTopbar = styled.section`\n  display: flex;\n  justify-content: space-between;\n  text-transform: uppercase;\n  font-weight: 600;\n  margin-bottom: 10px;\n  color: rgb(133, 201, 130);\n  svg#flag {\n    color: rgb(204, 19, 19);\n  }\n  > #restart:hover {\n    text-decoration: underline;\n    color: rgb(207, 203, 56);\n  }\n`;\n","import React, { useContext, useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStopwatch } from \"@fortawesome/free-solid-svg-icons\";\nimport { useTimer } from \"../../../hooks\";\nimport { MinesweeperContext } from \"../../../providers\";\nimport { GameStatus } from \"../../../types\";\n\nexport function Timer() {\n  const [{ status }] = useContext(MinesweeperContext);\n  const { time, start, stop, reset } = useTimer();\n\n  useEffect(() => {\n    if (status === GameStatus.TO_START && time !== 0) return reset();\n    if (status === GameStatus.IN_PROGRESS) return start();\n    return stop();\n  }, [reset, start, status, stop, time]);\n\n  const formatTime = () => {\n    return new Date(1000 * time).toISOString().substr(14, 5);\n  };\n\n  return (\n    <span>\n      <FontAwesomeIcon icon={faStopwatch} id=\"flag\" /> {formatTime()}\n    </span>\n  );\n}\n","import { useState, useRef, useCallback, useEffect } from \"react\";\n\nexport default function useTimer() {\n  const [time, setTime] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const timer = useRef<null | NodeJS.Timeout>(null);\n\n  useEffect(() => {\n    if (isActive) {\n      timer.current = setInterval(() => {\n        setTime((prev) => prev + 1);\n      }, 1000);\n    } else {\n      if (timer.current) clearInterval(timer.current);\n    }\n    return () => {\n      if (timer.current) clearInterval(timer.current);\n    };\n  }, [isActive]);\n\n  const start = useCallback(() => {\n    setIsActive(true);\n  }, []);\n\n  const stop = useCallback(() => {\n    setIsActive(false);\n  }, []);\n\n  const reset = useCallback(() => {\n    stop();\n    setTime(0);\n  }, [stop]);\n\n  return { time, start, stop, reset };\n}\n","import React from \"react\";\nimport { StyledTopbar } from \"./topbar.style\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFlag } from \"@fortawesome/free-solid-svg-icons\";\nimport { Timer } from \"./timer.component\";\n\ntype GameTopbarProps = {\n  nFlags: number;\n  reset: () => void;\n};\n\nexport function GameTopbar({ nFlags, reset }: GameTopbarProps) {\n  return (\n    <StyledTopbar>\n      <span>\n        <FontAwesomeIcon icon={faFlag} id=\"flag\" /> {nFlags}\n      </span>\n      <Timer />\n      <span id=\"restart\" onClick={reset}>\n        RESTART\n      </span>\n    </StyledTopbar>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const StyledMessageContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    position: absolute;\n    flex-direction: column;\n    z-index: 300;\n    background-color: rgba(255, 255, 255, 0.2);\n    width: 100%;\n    height: 100%;\n    bottom: 0;\n    letter-spacing: 0.1em;\n\n    h2 {\n        display: block;\n        font-size: 3rem;\n        color: rgb(31, 92, 50);\n        margin-bottom: 10px;\n        text-shadow: 0 1mm 0.8mm rgba(0, 0, 0, 0.2);\n    }\n\n    h2.gameover {\n        color: #432424;\n    }\n\n    button {\n        letter-spacing: 0.1em;\n        padding: 10px 20px;\n        font-size: 1.1rem;\n        border: none;\n        background-color: rgb(201, 197, 24);\n        color: white;\n        filter: drop-shadow(0 0 1mm rgba(0, 0, 0, 0.5));\n\n        :hover {\n            background-color: rgb(201, 205, 24);\n        }\n    }\n`;\n","import React from \"react\";\nimport {GameStatus} from \"../../../types\";\nimport {StyledMessageContainer} from \"./message.style\";\n\ntype MessageBoxProps = {\n  state: GameStatus;\n  reset: () => void;\n};\n\nexport function MessageBox({ state, reset }: MessageBoxProps) {\n  const message: {[key: string]: string} = {\n    [GameStatus.GAME_OVER] : \"GAME OVER\",\n    [GameStatus.VICTORY] : \"VICTORY\"\n  };\n  return (\n    <StyledMessageContainer>\n      <h2 className={state === GameStatus.GAME_OVER ? 'gameover' : undefined}>{message[state]}</h2>\n      <button onClick={reset}>Play again</button>\n    </StyledMessageContainer>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const StyledLevelsBar = styled.section`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  button {\n    padding: 5px 0;\n    color: #ccc;\n    font-weight: 700;\n    border: 1px solid #ccc;\n    flex-grow: 1;\n    outline: none;\n    background: none;\n    :hover {\n      color: rgb(207, 203, 56);\n    };\n    &.active {\n      background-color: rgb(56, 82, 62);\n      color: white;\n      border: none;\n    }\n  }\n`;\n","import React from \"react\";\nimport { StyledLevelsBar } from \"./levels.style\";\n\ntype LevelsProps = {\n  changeLevel: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  active: string;\n};\n\nexport function Levels({ changeLevel, active }: LevelsProps) {\n  return (\n    <StyledLevelsBar>\n      <button\n        onClick={changeLevel}\n        value=\"EASY\"\n        className={active === \"EASY\" ? \"active\" : \"\"}\n      >\n        EASY\n      </button>\n      <button\n        onClick={changeLevel}\n        value=\"MEDIUM\"\n        className={active === \"MEDIUM\" ? \"active\" : \"\"}\n      >\n        MEDIUM\n      </button>\n      <button\n        onClick={changeLevel}\n        value=\"HARD\"\n        className={active === \"HARD\" ? \"active\" : \"\"}\n      >\n        HARD\n      </button>\n    </StyledLevelsBar>\n  );\n}\n","import React, { useEffect, useContext } from \"react\";\nimport Board from \"../board/baoard.component\";\nimport { GameTopbar } from \"./topbar/topbar.component\";\nimport { MessageBox } from \"./messagebox/message.component\";\nimport { Levels } from \"./levels/levels.component\";\nimport { MinesweeperContext } from \"../../providers\";\nimport { ActionType } from \"../../state\";\nimport { LEVELS } from \"../../constants\";\n\nexport default function Minesweeper() {\n  const [{ status, cellsLeft, nFlags, level }, dispatch] = useContext(\n    MinesweeperContext\n  );\n\n  useEffect(() => {\n    dispatch({ type: ActionType.BUILD_BOARD });\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (cellsLeft === 0) dispatch({ type: ActionType.SET_VICTORY });\n  }, [dispatch, cellsLeft]);\n\n  const resetGame = (): void => {\n    dispatch({ type: ActionType.RESET_GAME });\n  };\n\n  const changeLevel = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    const value = (e.target as HTMLButtonElement).value;\n    dispatch({\n      type: ActionType.CHANGE_LEVEL,\n      level: LEVELS[value],\n    });\n  };\n\n  return (\n    <main>\n      <h1>Minesweeper</h1>\n      <Levels changeLevel={changeLevel} active={level.difficulty} />\n      <GameTopbar nFlags={nFlags} reset={resetGame} />\n      <section style={{ position: \"relative\" }}>\n        {status > 1 && <MessageBox reset={resetGame} state={status} />}\n        <Board />\n      </section>\n    </main>\n  );\n}\n","import React from \"react\";\nimport Minesweeper from \"./minesweeper/minesweeper.component\";\nimport { MinesweeperProvider } from \"../providers\";\nimport { reducer } from \"../state\";\nimport { INITIAL_GAME_STATE } from \"../constants\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MinesweeperProvider initialState={INITIAL_GAME_STATE} reducer={reducer}>\n        <Minesweeper />\n      </MinesweeperProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}